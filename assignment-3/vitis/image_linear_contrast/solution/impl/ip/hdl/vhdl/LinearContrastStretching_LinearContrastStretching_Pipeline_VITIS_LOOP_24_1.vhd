-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LinearContrastStretching_LinearContrastStretching_Pipeline_VITIS_LOOP_24_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_image_in_AWVALID : OUT STD_LOGIC;
    m_axi_image_in_AWREADY : IN STD_LOGIC;
    m_axi_image_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WVALID : OUT STD_LOGIC;
    m_axi_image_in_WREADY : IN STD_LOGIC;
    m_axi_image_in_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_in_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WLAST : OUT STD_LOGIC;
    m_axi_image_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARVALID : OUT STD_LOGIC;
    m_axi_image_in_ARREADY : IN STD_LOGIC;
    m_axi_image_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RVALID : IN STD_LOGIC;
    m_axi_image_in_RREADY : OUT STD_LOGIC;
    m_axi_image_in_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_in_RLAST : IN STD_LOGIC;
    m_axi_image_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_image_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BVALID : IN STD_LOGIC;
    m_axi_image_in_BREADY : OUT STD_LOGIC;
    m_axi_image_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_AWVALID : OUT STD_LOGIC;
    m_axi_image_out_AWREADY : IN STD_LOGIC;
    m_axi_image_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_WVALID : OUT STD_LOGIC;
    m_axi_image_out_WREADY : IN STD_LOGIC;
    m_axi_image_out_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_out_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_WLAST : OUT STD_LOGIC;
    m_axi_image_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_ARVALID : OUT STD_LOGIC;
    m_axi_image_out_ARREADY : IN STD_LOGIC;
    m_axi_image_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_RVALID : IN STD_LOGIC;
    m_axi_image_out_RREADY : OUT STD_LOGIC;
    m_axi_image_out_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_image_out_RLAST : IN STD_LOGIC;
    m_axi_image_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_image_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_BVALID : IN STD_LOGIC;
    m_axi_image_out_BREADY : OUT STD_LOGIC;
    m_axi_image_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    image_length : IN STD_LOGIC_VECTOR (31 downto 0);
    low_threshold_cast7 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln38_2 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln24 : IN STD_LOGIC_VECTOR (8 downto 0);
    low_new_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    high_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    low_threshold : IN STD_LOGIC_VECTOR (7 downto 0);
    low_new_threshold_cast3 : IN STD_LOGIC_VECTOR (7 downto 0);
    low_threshold_cast4 : IN STD_LOGIC_VECTOR (7 downto 0);
    image_in_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    image_out_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    high_threshold_cast6 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln34_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln38 : IN STD_LOGIC_VECTOR (8 downto 0);
    high_new_threshold : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of LinearContrastStretching_LinearContrastStretching_Pipeline_VITIS_LOOP_24_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal icmp_ln24_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal icmp_ln24_reg_636_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal icmp_ln28_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal icmp_ln28_1_reg_669_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state40_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal image_in_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal image_in_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal image_out_blk_n_AW : STD_LOGIC;
    signal image_out_blk_n_W : STD_LOGIC;
    signal icmp_ln28_1_reg_669_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal image_out_blk_n_B : STD_LOGIC;
    signal icmp_ln28_reg_646_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_288_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_296_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln38_cast_fu_314_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln38_cast_reg_581 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln34_1_cast_fu_318_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln34_1_cast_reg_587 : STD_LOGIC_VECTOR (16 downto 0);
    signal high_threshold_cast6_cast_fu_322_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal high_threshold_cast6_cast_reg_593 : STD_LOGIC_VECTOR (8 downto 0);
    signal low_threshold_cast4_cast_fu_326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal low_threshold_cast4_cast_reg_599 : STD_LOGIC_VECTOR (15 downto 0);
    signal low_new_threshold_cast3_cast_fu_330_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal low_new_threshold_cast3_cast_reg_605 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_cast_fu_334_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln24_cast_reg_611 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln38_2_cast_fu_338_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln38_2_cast_reg_617 : STD_LOGIC_VECTOR (16 downto 0);
    signal low_threshold_cast7_cast_fu_342_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal low_threshold_cast7_cast_reg_623 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_3_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_3_reg_629_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_3_reg_629_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_3_reg_629_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_3_reg_629_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_3_reg_629_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_636_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal image_in_addr_reg_640 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_reg_646_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_646_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_650_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln38_fu_399_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln38_reg_654 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln34_fu_413_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln34_reg_659 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln30_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln30_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_1_reg_669_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_673_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln38_1_fu_468_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln38_1_reg_677 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln34_1_fu_482_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln34_1_reg_682 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln30_1_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln30_1_reg_687 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_447_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln30_reg_692 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln30_reg_692_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sdiv_ln38_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sdiv_ln34_reg_702 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln30_1_reg_707 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln30_1_reg_707_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln38_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln38_1_fu_524_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln38_1_reg_722 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_1_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln34_1_reg_727 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter5_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter6_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter7_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter8_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter9_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter10_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter11_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter12_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter13_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter14_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter15_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter16_storereflowmerge_reg_254 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter4_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter5_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter6_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter7_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter8_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter9_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter10_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter11_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter12_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter13_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter14_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter15_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter16_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_1_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_2_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal trunc_ln30_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln30_1_fu_542_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_5_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_382_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln38_fu_390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_fu_399_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln34_fu_404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_fu_413_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln30_fu_418_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln30_fu_418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_4_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_2_fu_451_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln38_1_fu_459_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_1_fu_468_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln34_1_fu_473_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_1_fu_482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln30_1_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln30_1_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_492_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_504_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_1_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_1_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_439_ce : STD_LOGIC;
    signal grp_fu_443_ce : STD_LOGIC;
    signal grp_fu_447_ce : STD_LOGIC;
    signal grp_fu_492_ce : STD_LOGIC;
    signal grp_fu_496_ce : STD_LOGIC;
    signal grp_fu_500_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to19 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln30_1_fu_487_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln30_fu_418_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_924 : BOOLEAN;
    signal ap_condition_927 : BOOLEAN;
    signal ap_condition_901 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component LinearContrastStretching_mul_9s_9s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component LinearContrastStretching_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component LinearContrastStretching_sdiv_17ns_9s_8_21_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component LinearContrastStretching_udiv_16ns_8ns_8_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component LinearContrastStretching_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_9s_9s_17_1_1_U1 : component LinearContrastStretching_mul_9s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => sub_ln38_fu_390_p2,
        din1 => mul_ln38_fu_399_p1,
        dout => mul_ln38_fu_399_p2);

    mul_9s_9s_17_1_1_U2 : component LinearContrastStretching_mul_9s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => sub_ln34_fu_404_p2,
        din1 => mul_ln34_fu_413_p1,
        dout => mul_ln34_fu_413_p2);

    mul_8ns_8ns_16_1_1_U3 : component LinearContrastStretching_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln30_fu_418_p0,
        din1 => mul_ln30_fu_418_p1,
        dout => mul_ln30_fu_418_p2);

    sdiv_17ns_9s_8_21_1_U4 : component LinearContrastStretching_sdiv_17ns_9s_8_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln38_reg_654,
        din1 => grp_fu_439_p1,
        ce => grp_fu_439_ce,
        dout => grp_fu_439_p2);

    sdiv_17ns_9s_8_21_1_U5 : component LinearContrastStretching_sdiv_17ns_9s_8_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln34_reg_659,
        din1 => grp_fu_443_p1,
        ce => grp_fu_443_ce,
        dout => grp_fu_443_p2);

    udiv_16ns_8ns_8_20_1_U6 : component LinearContrastStretching_udiv_16ns_8ns_8_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln30_reg_664,
        din1 => grp_fu_447_p1,
        ce => grp_fu_447_ce,
        dout => grp_fu_447_p2);

    mul_9s_9s_17_1_1_U7 : component LinearContrastStretching_mul_9s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => sub_ln38_1_fu_459_p2,
        din1 => mul_ln38_1_fu_468_p1,
        dout => mul_ln38_1_fu_468_p2);

    mul_9s_9s_17_1_1_U8 : component LinearContrastStretching_mul_9s_9s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => sub_ln34_1_fu_473_p2,
        din1 => mul_ln34_1_fu_482_p1,
        dout => mul_ln34_1_fu_482_p2);

    mul_8ns_8ns_16_1_1_U9 : component LinearContrastStretching_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln30_1_fu_487_p0,
        din1 => mul_ln30_1_fu_487_p1,
        dout => mul_ln30_1_fu_487_p2);

    sdiv_17ns_9s_8_21_1_U10 : component LinearContrastStretching_sdiv_17ns_9s_8_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln38_1_reg_677,
        din1 => grp_fu_492_p1,
        ce => grp_fu_492_ce,
        dout => grp_fu_492_p2);

    sdiv_17ns_9s_8_21_1_U11 : component LinearContrastStretching_sdiv_17ns_9s_8_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 9,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln34_1_reg_682,
        din1 => grp_fu_496_p1,
        ce => grp_fu_496_ce,
        dout => grp_fu_496_p2);

    udiv_16ns_8ns_8_20_1_U12 : component LinearContrastStretching_udiv_16ns_8ns_8_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln30_1_reg_687,
        din1 => grp_fu_500_p1,
        ce => grp_fu_500_ce,
        dout => grp_fu_500_p2);

    flow_control_loop_pipe_sequential_init_U : component LinearContrastStretching_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter16_storereflowmerge_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln32_reg_650_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln24_reg_636_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter16_storereflowmerge_reg_254 <= add_ln38_fu_507_p2;
            elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln32_reg_650_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln24_reg_636_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter16_storereflowmerge_reg_254 <= add_ln34_fu_515_p2;
            elsif (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter16_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter15_storereflowmerge_reg_254;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_901)) then
                if ((ap_const_boolean_1 = ap_condition_927)) then 
                    ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264 <= add_ln38_1_reg_722;
                elsif ((ap_const_boolean_1 = ap_condition_924)) then 
                    ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264 <= add_ln34_1_reg_727;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter16_storereflowmerge3_reg_264;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx_fu_84 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636 = ap_const_lv1_1))) then 
                idx_fu_84 <= idx_5_fu_372_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_1_reg_673_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln24_reg_636_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln34_1_reg_727 <= add_ln34_1_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_1_reg_673_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln24_reg_636_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln38_1_reg_722 <= add_ln38_1_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln28_1_reg_669_pp0_iter10_reg <= icmp_ln28_1_reg_669_pp0_iter9_reg;
                icmp_ln28_1_reg_669_pp0_iter11_reg <= icmp_ln28_1_reg_669_pp0_iter10_reg;
                icmp_ln28_1_reg_669_pp0_iter12_reg <= icmp_ln28_1_reg_669_pp0_iter11_reg;
                icmp_ln28_1_reg_669_pp0_iter13_reg <= icmp_ln28_1_reg_669_pp0_iter12_reg;
                icmp_ln28_1_reg_669_pp0_iter14_reg <= icmp_ln28_1_reg_669_pp0_iter13_reg;
                icmp_ln28_1_reg_669_pp0_iter15_reg <= icmp_ln28_1_reg_669_pp0_iter14_reg;
                icmp_ln28_1_reg_669_pp0_iter16_reg <= icmp_ln28_1_reg_669_pp0_iter15_reg;
                icmp_ln28_1_reg_669_pp0_iter17_reg <= icmp_ln28_1_reg_669_pp0_iter16_reg;
                icmp_ln28_1_reg_669_pp0_iter18_reg <= icmp_ln28_1_reg_669_pp0_iter17_reg;
                icmp_ln28_1_reg_669_pp0_iter6_reg <= icmp_ln28_1_reg_669;
                icmp_ln28_1_reg_669_pp0_iter7_reg <= icmp_ln28_1_reg_669_pp0_iter6_reg;
                icmp_ln28_1_reg_669_pp0_iter8_reg <= icmp_ln28_1_reg_669_pp0_iter7_reg;
                icmp_ln28_1_reg_669_pp0_iter9_reg <= icmp_ln28_1_reg_669_pp0_iter8_reg;
                icmp_ln32_1_reg_673_pp0_iter10_reg <= icmp_ln32_1_reg_673_pp0_iter9_reg;
                icmp_ln32_1_reg_673_pp0_iter11_reg <= icmp_ln32_1_reg_673_pp0_iter10_reg;
                icmp_ln32_1_reg_673_pp0_iter12_reg <= icmp_ln32_1_reg_673_pp0_iter11_reg;
                icmp_ln32_1_reg_673_pp0_iter13_reg <= icmp_ln32_1_reg_673_pp0_iter12_reg;
                icmp_ln32_1_reg_673_pp0_iter14_reg <= icmp_ln32_1_reg_673_pp0_iter13_reg;
                icmp_ln32_1_reg_673_pp0_iter15_reg <= icmp_ln32_1_reg_673_pp0_iter14_reg;
                icmp_ln32_1_reg_673_pp0_iter6_reg <= icmp_ln32_1_reg_673;
                icmp_ln32_1_reg_673_pp0_iter7_reg <= icmp_ln32_1_reg_673_pp0_iter6_reg;
                icmp_ln32_1_reg_673_pp0_iter8_reg <= icmp_ln32_1_reg_673_pp0_iter7_reg;
                icmp_ln32_1_reg_673_pp0_iter9_reg <= icmp_ln32_1_reg_673_pp0_iter8_reg;
                reg_288_pp0_iter10_reg <= reg_288_pp0_iter9_reg;
                reg_288_pp0_iter11_reg <= reg_288_pp0_iter10_reg;
                reg_288_pp0_iter12_reg <= reg_288_pp0_iter11_reg;
                reg_288_pp0_iter13_reg <= reg_288_pp0_iter12_reg;
                reg_288_pp0_iter14_reg <= reg_288_pp0_iter13_reg;
                reg_288_pp0_iter15_reg <= reg_288_pp0_iter14_reg;
                reg_288_pp0_iter6_reg <= reg_288;
                reg_288_pp0_iter7_reg <= reg_288_pp0_iter6_reg;
                reg_288_pp0_iter8_reg <= reg_288_pp0_iter7_reg;
                reg_288_pp0_iter9_reg <= reg_288_pp0_iter8_reg;
                reg_296_pp0_iter10_reg <= reg_296_pp0_iter9_reg;
                reg_296_pp0_iter11_reg <= reg_296_pp0_iter10_reg;
                reg_296_pp0_iter12_reg <= reg_296_pp0_iter11_reg;
                reg_296_pp0_iter13_reg <= reg_296_pp0_iter12_reg;
                reg_296_pp0_iter14_reg <= reg_296_pp0_iter13_reg;
                reg_296_pp0_iter15_reg <= reg_296_pp0_iter14_reg;
                reg_296_pp0_iter6_reg <= reg_296;
                reg_296_pp0_iter7_reg <= reg_296_pp0_iter6_reg;
                reg_296_pp0_iter8_reg <= reg_296_pp0_iter7_reg;
                reg_296_pp0_iter9_reg <= reg_296_pp0_iter8_reg;
                udiv_ln30_1_reg_707_pp0_iter16_reg <= udiv_ln30_1_reg_707;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter10_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter9_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter10_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter9_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter11_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter10_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter11_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter10_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter12_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter11_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter12_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter11_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter13_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter12_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter13_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter12_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter14_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter13_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter14_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter13_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter15_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter14_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter15_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter14_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter16_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter15_storereflowmerge3_reg_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter0_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter1_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter0_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter1_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter2_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter1_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter2_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter3_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter2_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter4_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter3_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter4_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter3_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter5_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter4_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter5_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter4_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter6_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter5_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter6_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter5_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter7_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter6_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter7_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter6_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter8_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter7_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter8_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter7_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter9_storereflowmerge3_reg_264 <= ap_phi_reg_pp0_iter8_storereflowmerge3_reg_264;
                ap_phi_reg_pp0_iter9_storereflowmerge_reg_254 <= ap_phi_reg_pp0_iter8_storereflowmerge_reg_254;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    high_threshold_cast6_cast_reg_593(7 downto 0) <= high_threshold_cast6_cast_fu_322_p1(7 downto 0);
                icmp_ln24_reg_636 <= icmp_ln24_fu_354_p2;
                icmp_ln24_reg_636_pp0_iter10_reg <= icmp_ln24_reg_636_pp0_iter9_reg;
                icmp_ln24_reg_636_pp0_iter11_reg <= icmp_ln24_reg_636_pp0_iter10_reg;
                icmp_ln24_reg_636_pp0_iter12_reg <= icmp_ln24_reg_636_pp0_iter11_reg;
                icmp_ln24_reg_636_pp0_iter13_reg <= icmp_ln24_reg_636_pp0_iter12_reg;
                icmp_ln24_reg_636_pp0_iter14_reg <= icmp_ln24_reg_636_pp0_iter13_reg;
                icmp_ln24_reg_636_pp0_iter15_reg <= icmp_ln24_reg_636_pp0_iter14_reg;
                icmp_ln24_reg_636_pp0_iter16_reg <= icmp_ln24_reg_636_pp0_iter15_reg;
                icmp_ln24_reg_636_pp0_iter1_reg <= icmp_ln24_reg_636;
                icmp_ln24_reg_636_pp0_iter2_reg <= icmp_ln24_reg_636_pp0_iter1_reg;
                icmp_ln24_reg_636_pp0_iter3_reg <= icmp_ln24_reg_636_pp0_iter2_reg;
                icmp_ln24_reg_636_pp0_iter4_reg <= icmp_ln24_reg_636_pp0_iter3_reg;
                icmp_ln24_reg_636_pp0_iter5_reg <= icmp_ln24_reg_636_pp0_iter4_reg;
                icmp_ln24_reg_636_pp0_iter6_reg <= icmp_ln24_reg_636_pp0_iter5_reg;
                icmp_ln24_reg_636_pp0_iter7_reg <= icmp_ln24_reg_636_pp0_iter6_reg;
                icmp_ln24_reg_636_pp0_iter8_reg <= icmp_ln24_reg_636_pp0_iter7_reg;
                icmp_ln24_reg_636_pp0_iter9_reg <= icmp_ln24_reg_636_pp0_iter8_reg;
                icmp_ln28_reg_646_pp0_iter10_reg <= icmp_ln28_reg_646_pp0_iter9_reg;
                icmp_ln28_reg_646_pp0_iter11_reg <= icmp_ln28_reg_646_pp0_iter10_reg;
                icmp_ln28_reg_646_pp0_iter12_reg <= icmp_ln28_reg_646_pp0_iter11_reg;
                icmp_ln28_reg_646_pp0_iter13_reg <= icmp_ln28_reg_646_pp0_iter12_reg;
                icmp_ln28_reg_646_pp0_iter14_reg <= icmp_ln28_reg_646_pp0_iter13_reg;
                icmp_ln28_reg_646_pp0_iter15_reg <= icmp_ln28_reg_646_pp0_iter14_reg;
                icmp_ln28_reg_646_pp0_iter16_reg <= icmp_ln28_reg_646_pp0_iter15_reg;
                icmp_ln28_reg_646_pp0_iter17_reg <= icmp_ln28_reg_646_pp0_iter16_reg;
                icmp_ln28_reg_646_pp0_iter18_reg <= icmp_ln28_reg_646_pp0_iter17_reg;
                icmp_ln28_reg_646_pp0_iter6_reg <= icmp_ln28_reg_646;
                icmp_ln28_reg_646_pp0_iter7_reg <= icmp_ln28_reg_646_pp0_iter6_reg;
                icmp_ln28_reg_646_pp0_iter8_reg <= icmp_ln28_reg_646_pp0_iter7_reg;
                icmp_ln28_reg_646_pp0_iter9_reg <= icmp_ln28_reg_646_pp0_iter8_reg;
                icmp_ln32_reg_650_pp0_iter10_reg <= icmp_ln32_reg_650_pp0_iter9_reg;
                icmp_ln32_reg_650_pp0_iter11_reg <= icmp_ln32_reg_650_pp0_iter10_reg;
                icmp_ln32_reg_650_pp0_iter12_reg <= icmp_ln32_reg_650_pp0_iter11_reg;
                icmp_ln32_reg_650_pp0_iter13_reg <= icmp_ln32_reg_650_pp0_iter12_reg;
                icmp_ln32_reg_650_pp0_iter14_reg <= icmp_ln32_reg_650_pp0_iter13_reg;
                icmp_ln32_reg_650_pp0_iter15_reg <= icmp_ln32_reg_650_pp0_iter14_reg;
                icmp_ln32_reg_650_pp0_iter6_reg <= icmp_ln32_reg_650;
                icmp_ln32_reg_650_pp0_iter7_reg <= icmp_ln32_reg_650_pp0_iter6_reg;
                icmp_ln32_reg_650_pp0_iter8_reg <= icmp_ln32_reg_650_pp0_iter7_reg;
                icmp_ln32_reg_650_pp0_iter9_reg <= icmp_ln32_reg_650_pp0_iter8_reg;
                idx_3_reg_629 <= ap_sig_allocacmp_idx_3;
                idx_3_reg_629_pp0_iter1_reg <= idx_3_reg_629;
                idx_3_reg_629_pp0_iter2_reg <= idx_3_reg_629_pp0_iter1_reg;
                idx_3_reg_629_pp0_iter3_reg <= idx_3_reg_629_pp0_iter2_reg;
                idx_3_reg_629_pp0_iter4_reg <= idx_3_reg_629_pp0_iter3_reg;
                idx_3_reg_629_pp0_iter5_reg <= idx_3_reg_629_pp0_iter4_reg;
                    low_new_threshold_cast3_cast_reg_605(7 downto 0) <= low_new_threshold_cast3_cast_fu_330_p1(7 downto 0);
                    low_threshold_cast4_cast_reg_599(7 downto 0) <= low_threshold_cast4_cast_fu_326_p1(7 downto 0);
                    low_threshold_cast7_cast_reg_623(7 downto 0) <= low_threshold_cast7_cast_fu_342_p1(7 downto 0);
                sext_ln24_cast_reg_611 <= sext_ln24_cast_fu_334_p1;
                sext_ln34_1_cast_reg_587 <= sext_ln34_1_cast_fu_318_p1;
                sext_ln38_2_cast_reg_617 <= sext_ln38_2_cast_fu_338_p1;
                sext_ln38_cast_reg_581 <= sext_ln38_cast_fu_314_p1;
                udiv_ln30_reg_692_pp0_iter16_reg <= udiv_ln30_reg_692;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_636_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln28_1_reg_669 <= grp_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1))) then
                icmp_ln28_reg_646 <= grp_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_304_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln32_1_reg_673 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_304_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln32_reg_650 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_354_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                image_in_addr_reg_640 <= add_ln28_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_304_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln30_1_reg_687 <= mul_ln30_1_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_304_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln30_reg_664 <= mul_ln30_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_309_p2 = ap_const_lv1_1) and (icmp_ln24_reg_636_pp0_iter5_reg = ap_const_lv1_1) and (grp_fu_304_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln34_1_reg_682 <= mul_ln34_1_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_309_p2 = ap_const_lv1_1) and (grp_fu_304_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1))) then
                mul_ln34_reg_659 <= mul_ln34_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_309_p2 = ap_const_lv1_0) and (icmp_ln24_reg_636_pp0_iter5_reg = ap_const_lv1_1) and (grp_fu_304_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln38_1_reg_677 <= mul_ln38_1_fu_468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_309_p2 = ap_const_lv1_0) and (grp_fu_304_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1))) then
                mul_ln38_reg_654 <= mul_ln38_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1)))) then
                reg_284 <= m_axi_image_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_reg_646 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_reg_646 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_288 <= add_ln28_1_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_fu_304_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((grp_fu_304_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_296 <= add_ln28_2_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_650_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln24_reg_636_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sdiv_ln34_reg_702 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_650_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln24_reg_636_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sdiv_ln38_reg_697 <= grp_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_1_reg_669_pp0_iter14_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                udiv_ln30_1_reg_707 <= grp_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_reg_646_pp0_iter14_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                udiv_ln30_reg_692 <= grp_fu_447_p2;
            end if;
        end if;
    end process;
    high_threshold_cast6_cast_reg_593(8) <= '0';
    low_threshold_cast4_cast_reg_599(15 downto 8) <= "00000000";
    low_new_threshold_cast3_cast_reg_605(15 downto 8) <= "00000000";
    low_threshold_cast7_cast_reg_623(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to19, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to19 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln28_1_fu_423_p2 <= std_logic_vector(unsigned(idx_3_reg_629_pp0_iter5_reg) + unsigned(image_out_offset));
    add_ln28_2_fu_433_p2 <= std_logic_vector(unsigned(idx_4_fu_428_p2) + unsigned(image_out_offset));
    add_ln28_fu_360_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx_3) + unsigned(image_in_offset));
    add_ln34_1_fu_533_p2 <= std_logic_vector(unsigned(trunc_ln34_1_fu_529_p1) + unsigned(high_new_threshold));
    add_ln34_fu_515_p2 <= std_logic_vector(unsigned(trunc_ln34_fu_512_p1) + unsigned(high_new_threshold));
    add_ln38_1_fu_524_p2 <= std_logic_vector(unsigned(trunc_ln38_1_fu_520_p1) + unsigned(low_new_threshold));
    add_ln38_fu_507_p2 <= std_logic_vector(unsigned(trunc_ln38_fu_504_p1) + unsigned(low_new_threshold));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter19, m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg, m_axi_image_out_BVALID, icmp_ln28_reg_646_pp0_iter18_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter19, m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg, m_axi_image_out_BVALID, icmp_ln28_reg_646_pp0_iter18_reg, ap_block_state33_io, ap_block_state35_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state35_io)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state33_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter19, m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg, m_axi_image_out_BVALID, icmp_ln28_reg_646_pp0_iter18_reg, ap_block_state33_io, ap_block_state35_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state35_io)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state33_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter19, m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg, m_axi_image_out_BVALID, icmp_ln28_1_reg_669_pp0_iter18_reg)
    begin
                ap_block_pp0_stage1_01001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter19, m_axi_image_in_RVALID, ap_block_state2_io, icmp_ln24_reg_636_pp0_iter4_reg, m_axi_image_out_BVALID, ap_block_state34_io, icmp_ln28_1_reg_669_pp0_iter18_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state34_io)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter19, m_axi_image_in_RVALID, ap_block_state2_io, icmp_ln24_reg_636_pp0_iter4_reg, m_axi_image_out_BVALID, ap_block_state34_io, icmp_ln28_1_reg_669_pp0_iter18_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state34_io)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_pp0_stage1_iter4_assign_proc : process(m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg)
    begin
                ap_block_state10_pp0_stage1_iter4 <= ((icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter5_assign_proc : process(m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg)
    begin
                ap_block_state11_pp0_stage0_iter5 <= ((icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1) and (m_axi_image_in_RVALID = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_image_in_ARREADY, icmp_ln24_reg_636)
    begin
                ap_block_state2_io <= ((icmp_ln24_reg_636 = ap_const_lv1_1) and (m_axi_image_in_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_io_assign_proc : process(m_axi_image_out_AWREADY, icmp_ln28_reg_646_pp0_iter15_reg)
    begin
                ap_block_state33_io <= (((icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (m_axi_image_out_AWREADY = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_1) and (m_axi_image_out_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_io_assign_proc : process(m_axi_image_out_AWREADY, m_axi_image_out_WREADY, icmp_ln28_reg_646_pp0_iter16_reg, icmp_ln28_1_reg_669_pp0_iter15_reg)
    begin
                ap_block_state34_io <= (((icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_1) and (m_axi_image_out_AWREADY = ap_const_logic_0)) or ((icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0) and (m_axi_image_out_AWREADY = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_1) and (m_axi_image_out_WREADY = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_image_out_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(m_axi_image_out_WREADY, icmp_ln28_1_reg_669_pp0_iter16_reg)
    begin
                ap_block_state35_io <= (((icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_1) and (m_axi_image_out_WREADY = ap_const_logic_0)) or ((icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_image_out_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp0_stage0_iter19_assign_proc : process(m_axi_image_out_BVALID, icmp_ln28_reg_646_pp0_iter18_reg)
    begin
                ap_block_state39_pp0_stage0_iter19 <= (((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state40_pp0_stage1_iter19_assign_proc : process(m_axi_image_out_BVALID, icmp_ln28_1_reg_669_pp0_iter18_reg)
    begin
                ap_block_state40_pp0_stage1_iter19 <= (((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_901_assign_proc : process(ap_enable_reg_pp0_iter16, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_901 <= ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_924_assign_proc : process(icmp_ln28_1_reg_669_pp0_iter15_reg, icmp_ln24_reg_636_pp0_iter16_reg, icmp_ln32_1_reg_673_pp0_iter15_reg)
    begin
                ap_condition_924 <= ((icmp_ln32_1_reg_673_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln24_reg_636_pp0_iter16_reg = ap_const_lv1_1) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0));
    end process;


    ap_condition_927_assign_proc : process(icmp_ln28_1_reg_669_pp0_iter15_reg, icmp_ln24_reg_636_pp0_iter16_reg, icmp_ln32_1_reg_673_pp0_iter15_reg)
    begin
                ap_condition_927 <= ((icmp_ln32_1_reg_673_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln24_reg_636_pp0_iter16_reg = ap_const_lv1_1) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln24_reg_636, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg, ap_loop_exit_ready_pp0_iter17_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) 
    and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to19_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to19 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to19 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_storereflowmerge3_reg_264 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_storereflowmerge_reg_254 <= "XXXXXXXX";

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, idx_fu_84, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_idx_3 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_idx_3 <= idx_fu_84;
        end if; 
    end process;

    grp_fu_304_p2 <= "1" when (unsigned(reg_284) < unsigned(low_threshold)) else "0";
    grp_fu_309_p2 <= "1" when (unsigned(reg_284) > unsigned(high_threshold)) else "0";

    grp_fu_439_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_439_ce <= ap_const_logic_1;
        else 
            grp_fu_439_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_439_p1 <= sext_ln24_cast_reg_611(9 - 1 downto 0);

    grp_fu_443_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_443_ce <= ap_const_logic_1;
        else 
            grp_fu_443_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_443_p1 <= sext_ln38_cast_reg_581(9 - 1 downto 0);

    grp_fu_447_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_447_ce <= ap_const_logic_1;
        else 
            grp_fu_447_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_447_p1 <= low_threshold_cast4_cast_reg_599(8 - 1 downto 0);

    grp_fu_492_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_492_ce <= ap_const_logic_1;
        else 
            grp_fu_492_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_492_p1 <= sext_ln24_cast_reg_611(9 - 1 downto 0);

    grp_fu_496_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_496_ce <= ap_const_logic_1;
        else 
            grp_fu_496_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_496_p1 <= sext_ln38_cast_reg_581(9 - 1 downto 0);

    grp_fu_500_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_500_ce <= ap_const_logic_1;
        else 
            grp_fu_500_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_500_p1 <= low_threshold_cast4_cast_reg_599(8 - 1 downto 0);
    high_threshold_cast6_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(high_threshold_cast6),9));
    icmp_ln24_fu_354_p2 <= "1" when (unsigned(ap_sig_allocacmp_idx_3) < unsigned(image_length)) else "0";
    idx_4_fu_428_p2 <= (idx_3_reg_629_pp0_iter5_reg or ap_const_lv32_1);
    idx_5_fu_372_p2 <= std_logic_vector(unsigned(idx_3_reg_629) + unsigned(ap_const_lv32_2));

    image_in_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, m_axi_image_in_ARREADY, icmp_ln24_reg_636, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636 = ap_const_lv1_1))) then 
            image_in_blk_n_AR <= m_axi_image_in_ARREADY;
        else 
            image_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    image_in_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, m_axi_image_in_RVALID, icmp_ln24_reg_636_pp0_iter4_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1)))) then 
            image_in_blk_n_R <= m_axi_image_in_RVALID;
        else 
            image_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_AW_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_CS_fsm_pp0_stage1, m_axi_image_out_AWREADY, icmp_ln28_1_reg_669_pp0_iter15_reg, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln28_reg_646_pp0_iter15_reg)
    begin
        if ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_out_blk_n_AW <= m_axi_image_out_AWREADY;
        else 
            image_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, m_axi_image_out_BVALID, icmp_ln28_1_reg_669_pp0_iter18_reg, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln28_reg_646_pp0_iter18_reg)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_out_blk_n_B <= m_axi_image_out_BVALID;
        else 
            image_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, m_axi_image_out_WREADY, icmp_ln28_reg_646_pp0_iter16_reg, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln28_1_reg_669_pp0_iter16_reg)
    begin
        if ((((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            image_out_blk_n_W <= m_axi_image_out_WREADY;
        else 
            image_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    low_new_threshold_cast3_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_new_threshold_cast3),16));
    low_threshold_cast4_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_threshold_cast4),16));
    low_threshold_cast7_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low_threshold_cast7),9));
    m_axi_image_in_ARADDR <= image_in_addr_reg_640;
    m_axi_image_in_ARBURST <= ap_const_lv2_0;
    m_axi_image_in_ARCACHE <= ap_const_lv4_0;
    m_axi_image_in_ARID <= ap_const_lv1_0;
    m_axi_image_in_ARLEN <= ap_const_lv32_2;
    m_axi_image_in_ARLOCK <= ap_const_lv2_0;
    m_axi_image_in_ARPROT <= ap_const_lv3_0;
    m_axi_image_in_ARQOS <= ap_const_lv4_0;
    m_axi_image_in_ARREGION <= ap_const_lv4_0;
    m_axi_image_in_ARSIZE <= ap_const_lv3_0;
    m_axi_image_in_ARUSER <= ap_const_lv1_0;

    m_axi_image_in_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln24_reg_636, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636 = ap_const_lv1_1))) then 
            m_axi_image_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_image_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_AWADDR <= ap_const_lv32_0;
    m_axi_image_in_AWBURST <= ap_const_lv2_0;
    m_axi_image_in_AWCACHE <= ap_const_lv4_0;
    m_axi_image_in_AWID <= ap_const_lv1_0;
    m_axi_image_in_AWLEN <= ap_const_lv32_0;
    m_axi_image_in_AWLOCK <= ap_const_lv2_0;
    m_axi_image_in_AWPROT <= ap_const_lv3_0;
    m_axi_image_in_AWQOS <= ap_const_lv4_0;
    m_axi_image_in_AWREGION <= ap_const_lv4_0;
    m_axi_image_in_AWSIZE <= ap_const_lv3_0;
    m_axi_image_in_AWUSER <= ap_const_lv1_0;
    m_axi_image_in_AWVALID <= ap_const_logic_0;
    m_axi_image_in_BREADY <= ap_const_logic_0;

    m_axi_image_in_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, icmp_ln24_reg_636_pp0_iter4_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_636_pp0_iter4_reg = ap_const_lv1_1)))) then 
            m_axi_image_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_image_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_WDATA <= ap_const_lv8_0;
    m_axi_image_in_WID <= ap_const_lv1_0;
    m_axi_image_in_WLAST <= ap_const_logic_0;
    m_axi_image_in_WSTRB <= ap_const_lv1_0;
    m_axi_image_in_WUSER <= ap_const_lv1_0;
    m_axi_image_in_WVALID <= ap_const_logic_0;
    m_axi_image_out_ARADDR <= ap_const_lv32_0;
    m_axi_image_out_ARBURST <= ap_const_lv2_0;
    m_axi_image_out_ARCACHE <= ap_const_lv4_0;
    m_axi_image_out_ARID <= ap_const_lv1_0;
    m_axi_image_out_ARLEN <= ap_const_lv32_0;
    m_axi_image_out_ARLOCK <= ap_const_lv2_0;
    m_axi_image_out_ARPROT <= ap_const_lv3_0;
    m_axi_image_out_ARQOS <= ap_const_lv4_0;
    m_axi_image_out_ARREGION <= ap_const_lv4_0;
    m_axi_image_out_ARSIZE <= ap_const_lv3_0;
    m_axi_image_out_ARUSER <= ap_const_lv1_0;
    m_axi_image_out_ARVALID <= ap_const_logic_0;

    m_axi_image_out_AWADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_CS_fsm_pp0_stage1, icmp_ln28_1_reg_669_pp0_iter15_reg, icmp_ln28_reg_646_pp0_iter15_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001, reg_288_pp0_iter15_reg, reg_296_pp0_iter15_reg)
    begin
        if ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_axi_image_out_AWADDR <= reg_296_pp0_iter15_reg;
        elsif ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_image_out_AWADDR <= reg_288_pp0_iter15_reg;
        else 
            m_axi_image_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_image_out_AWBURST <= ap_const_lv2_0;
    m_axi_image_out_AWCACHE <= ap_const_lv4_0;
    m_axi_image_out_AWID <= ap_const_lv1_0;
    m_axi_image_out_AWLEN <= ap_const_lv32_1;
    m_axi_image_out_AWLOCK <= ap_const_lv2_0;
    m_axi_image_out_AWPROT <= ap_const_lv3_0;
    m_axi_image_out_AWQOS <= ap_const_lv4_0;
    m_axi_image_out_AWREGION <= ap_const_lv4_0;
    m_axi_image_out_AWSIZE <= ap_const_lv3_0;
    m_axi_image_out_AWUSER <= ap_const_lv1_0;

    m_axi_image_out_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_CS_fsm_pp0_stage1, icmp_ln28_1_reg_669_pp0_iter15_reg, icmp_ln28_reg_646_pp0_iter15_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_1_reg_669_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter15_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_image_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_image_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_image_out_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, icmp_ln28_1_reg_669_pp0_iter18_reg, icmp_ln28_reg_646_pp0_iter18_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_1_reg_669_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (icmp_ln28_reg_646_pp0_iter18_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_image_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_image_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_out_RREADY <= ap_const_logic_0;

    m_axi_image_out_WDATA_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, icmp_ln28_reg_646_pp0_iter16_reg, icmp_ln28_1_reg_669_pp0_iter16_reg, ap_phi_reg_pp0_iter16_storereflowmerge_reg_254, ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264, ap_block_pp0_stage1_01001, trunc_ln30_fu_538_p1, ap_block_pp0_stage0_01001, trunc_ln30_1_fu_542_p1)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_image_out_WDATA <= trunc_ln30_1_fu_542_p1;
        elsif (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_image_out_WDATA <= ap_phi_reg_pp0_iter17_storereflowmerge3_reg_264;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_image_out_WDATA <= trunc_ln30_fu_538_p1;
        elsif (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_image_out_WDATA <= ap_phi_reg_pp0_iter16_storereflowmerge_reg_254;
        else 
            m_axi_image_out_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_image_out_WID <= ap_const_lv1_0;
    m_axi_image_out_WLAST <= ap_const_logic_0;
    m_axi_image_out_WSTRB <= ap_const_lv1_1;
    m_axi_image_out_WUSER <= ap_const_lv1_0;

    m_axi_image_out_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_CS_fsm_pp0_stage1, icmp_ln28_reg_646_pp0_iter16_reg, icmp_ln28_1_reg_669_pp0_iter16_reg, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln28_1_reg_669_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln28_reg_646_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            m_axi_image_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_image_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln30_1_fu_487_p0 <= mul_ln30_1_fu_487_p00(8 - 1 downto 0);
    mul_ln30_1_fu_487_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_284),16));
    mul_ln30_1_fu_487_p1 <= low_new_threshold_cast3_cast_reg_605(8 - 1 downto 0);
    mul_ln30_fu_418_p0 <= mul_ln30_fu_418_p00(8 - 1 downto 0);
    mul_ln30_fu_418_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_284),16));
    mul_ln30_fu_418_p1 <= low_new_threshold_cast3_cast_reg_605(8 - 1 downto 0);
    mul_ln34_1_fu_482_p1 <= sext_ln34_1_cast_reg_587(9 - 1 downto 0);
    mul_ln34_fu_413_p1 <= sext_ln34_1_cast_reg_587(9 - 1 downto 0);
    mul_ln38_1_fu_468_p1 <= sext_ln38_2_cast_reg_617(9 - 1 downto 0);
    mul_ln38_fu_399_p1 <= sext_ln38_2_cast_reg_617(9 - 1 downto 0);
        sext_ln24_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln24),17));

        sext_ln34_1_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln34_1),17));

        sext_ln38_2_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln38_2),17));

        sext_ln38_cast_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln38),17));

    sub_ln34_1_fu_473_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_451_p1) - unsigned(high_threshold_cast6_cast_reg_593));
    sub_ln34_fu_404_p2 <= std_logic_vector(unsigned(zext_ln28_fu_382_p1) - unsigned(high_threshold_cast6_cast_reg_593));
    sub_ln38_1_fu_459_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_451_p1) - unsigned(low_threshold_cast7_cast_reg_623));
    sub_ln38_fu_390_p2 <= std_logic_vector(unsigned(zext_ln28_fu_382_p1) - unsigned(low_threshold_cast7_cast_reg_623));
    trunc_ln30_1_fu_542_p1 <= udiv_ln30_1_reg_707_pp0_iter16_reg(8 - 1 downto 0);
    trunc_ln30_fu_538_p1 <= udiv_ln30_reg_692_pp0_iter16_reg(8 - 1 downto 0);
    trunc_ln34_1_fu_529_p1 <= grp_fu_496_p2(8 - 1 downto 0);
    trunc_ln34_fu_512_p1 <= sdiv_ln34_reg_702(8 - 1 downto 0);
    trunc_ln38_1_fu_520_p1 <= grp_fu_492_p2(8 - 1 downto 0);
    trunc_ln38_fu_504_p1 <= sdiv_ln38_reg_697(8 - 1 downto 0);
    zext_ln28_2_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_284),9));
    zext_ln28_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_284),9));
end behav;
