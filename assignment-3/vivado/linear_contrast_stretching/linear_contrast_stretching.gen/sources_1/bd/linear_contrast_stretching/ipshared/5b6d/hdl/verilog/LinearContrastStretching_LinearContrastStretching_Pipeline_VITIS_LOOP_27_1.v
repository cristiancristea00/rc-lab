// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module LinearContrastStretching_LinearContrastStretching_Pipeline_VITIS_LOOP_27_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_image_in_AWVALID,
        m_axi_image_in_AWREADY,
        m_axi_image_in_AWADDR,
        m_axi_image_in_AWID,
        m_axi_image_in_AWLEN,
        m_axi_image_in_AWSIZE,
        m_axi_image_in_AWBURST,
        m_axi_image_in_AWLOCK,
        m_axi_image_in_AWCACHE,
        m_axi_image_in_AWPROT,
        m_axi_image_in_AWQOS,
        m_axi_image_in_AWREGION,
        m_axi_image_in_AWUSER,
        m_axi_image_in_WVALID,
        m_axi_image_in_WREADY,
        m_axi_image_in_WDATA,
        m_axi_image_in_WSTRB,
        m_axi_image_in_WLAST,
        m_axi_image_in_WID,
        m_axi_image_in_WUSER,
        m_axi_image_in_ARVALID,
        m_axi_image_in_ARREADY,
        m_axi_image_in_ARADDR,
        m_axi_image_in_ARID,
        m_axi_image_in_ARLEN,
        m_axi_image_in_ARSIZE,
        m_axi_image_in_ARBURST,
        m_axi_image_in_ARLOCK,
        m_axi_image_in_ARCACHE,
        m_axi_image_in_ARPROT,
        m_axi_image_in_ARQOS,
        m_axi_image_in_ARREGION,
        m_axi_image_in_ARUSER,
        m_axi_image_in_RVALID,
        m_axi_image_in_RREADY,
        m_axi_image_in_RDATA,
        m_axi_image_in_RLAST,
        m_axi_image_in_RID,
        m_axi_image_in_RFIFONUM,
        m_axi_image_in_RUSER,
        m_axi_image_in_RRESP,
        m_axi_image_in_BVALID,
        m_axi_image_in_BREADY,
        m_axi_image_in_BRESP,
        m_axi_image_in_BID,
        m_axi_image_in_BUSER,
        m_axi_image_out_AWVALID,
        m_axi_image_out_AWREADY,
        m_axi_image_out_AWADDR,
        m_axi_image_out_AWID,
        m_axi_image_out_AWLEN,
        m_axi_image_out_AWSIZE,
        m_axi_image_out_AWBURST,
        m_axi_image_out_AWLOCK,
        m_axi_image_out_AWCACHE,
        m_axi_image_out_AWPROT,
        m_axi_image_out_AWQOS,
        m_axi_image_out_AWREGION,
        m_axi_image_out_AWUSER,
        m_axi_image_out_WVALID,
        m_axi_image_out_WREADY,
        m_axi_image_out_WDATA,
        m_axi_image_out_WSTRB,
        m_axi_image_out_WLAST,
        m_axi_image_out_WID,
        m_axi_image_out_WUSER,
        m_axi_image_out_ARVALID,
        m_axi_image_out_ARREADY,
        m_axi_image_out_ARADDR,
        m_axi_image_out_ARID,
        m_axi_image_out_ARLEN,
        m_axi_image_out_ARSIZE,
        m_axi_image_out_ARBURST,
        m_axi_image_out_ARLOCK,
        m_axi_image_out_ARCACHE,
        m_axi_image_out_ARPROT,
        m_axi_image_out_ARQOS,
        m_axi_image_out_ARREGION,
        m_axi_image_out_ARUSER,
        m_axi_image_out_RVALID,
        m_axi_image_out_RREADY,
        m_axi_image_out_RDATA,
        m_axi_image_out_RLAST,
        m_axi_image_out_RID,
        m_axi_image_out_RFIFONUM,
        m_axi_image_out_RUSER,
        m_axi_image_out_RRESP,
        m_axi_image_out_BVALID,
        m_axi_image_out_BREADY,
        m_axi_image_out_BRESP,
        m_axi_image_out_BID,
        m_axi_image_out_BUSER,
        sext_ln27,
        sext_ln27_1,
        image_length,
        low_new_threshold,
        low_threshold,
        high_threshold,
        sub4,
        sub6,
        high_new_threshold,
        sub10,
        sub12
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_image_in_AWVALID;
input   m_axi_image_in_AWREADY;
output  [31:0] m_axi_image_in_AWADDR;
output  [0:0] m_axi_image_in_AWID;
output  [31:0] m_axi_image_in_AWLEN;
output  [2:0] m_axi_image_in_AWSIZE;
output  [1:0] m_axi_image_in_AWBURST;
output  [1:0] m_axi_image_in_AWLOCK;
output  [3:0] m_axi_image_in_AWCACHE;
output  [2:0] m_axi_image_in_AWPROT;
output  [3:0] m_axi_image_in_AWQOS;
output  [3:0] m_axi_image_in_AWREGION;
output  [0:0] m_axi_image_in_AWUSER;
output   m_axi_image_in_WVALID;
input   m_axi_image_in_WREADY;
output  [31:0] m_axi_image_in_WDATA;
output  [3:0] m_axi_image_in_WSTRB;
output   m_axi_image_in_WLAST;
output  [0:0] m_axi_image_in_WID;
output  [0:0] m_axi_image_in_WUSER;
output   m_axi_image_in_ARVALID;
input   m_axi_image_in_ARREADY;
output  [31:0] m_axi_image_in_ARADDR;
output  [0:0] m_axi_image_in_ARID;
output  [31:0] m_axi_image_in_ARLEN;
output  [2:0] m_axi_image_in_ARSIZE;
output  [1:0] m_axi_image_in_ARBURST;
output  [1:0] m_axi_image_in_ARLOCK;
output  [3:0] m_axi_image_in_ARCACHE;
output  [2:0] m_axi_image_in_ARPROT;
output  [3:0] m_axi_image_in_ARQOS;
output  [3:0] m_axi_image_in_ARREGION;
output  [0:0] m_axi_image_in_ARUSER;
input   m_axi_image_in_RVALID;
output   m_axi_image_in_RREADY;
input  [31:0] m_axi_image_in_RDATA;
input   m_axi_image_in_RLAST;
input  [0:0] m_axi_image_in_RID;
input  [8:0] m_axi_image_in_RFIFONUM;
input  [0:0] m_axi_image_in_RUSER;
input  [1:0] m_axi_image_in_RRESP;
input   m_axi_image_in_BVALID;
output   m_axi_image_in_BREADY;
input  [1:0] m_axi_image_in_BRESP;
input  [0:0] m_axi_image_in_BID;
input  [0:0] m_axi_image_in_BUSER;
output   m_axi_image_out_AWVALID;
input   m_axi_image_out_AWREADY;
output  [31:0] m_axi_image_out_AWADDR;
output  [0:0] m_axi_image_out_AWID;
output  [31:0] m_axi_image_out_AWLEN;
output  [2:0] m_axi_image_out_AWSIZE;
output  [1:0] m_axi_image_out_AWBURST;
output  [1:0] m_axi_image_out_AWLOCK;
output  [3:0] m_axi_image_out_AWCACHE;
output  [2:0] m_axi_image_out_AWPROT;
output  [3:0] m_axi_image_out_AWQOS;
output  [3:0] m_axi_image_out_AWREGION;
output  [0:0] m_axi_image_out_AWUSER;
output   m_axi_image_out_WVALID;
input   m_axi_image_out_WREADY;
output  [31:0] m_axi_image_out_WDATA;
output  [3:0] m_axi_image_out_WSTRB;
output   m_axi_image_out_WLAST;
output  [0:0] m_axi_image_out_WID;
output  [0:0] m_axi_image_out_WUSER;
output   m_axi_image_out_ARVALID;
input   m_axi_image_out_ARREADY;
output  [31:0] m_axi_image_out_ARADDR;
output  [0:0] m_axi_image_out_ARID;
output  [31:0] m_axi_image_out_ARLEN;
output  [2:0] m_axi_image_out_ARSIZE;
output  [1:0] m_axi_image_out_ARBURST;
output  [1:0] m_axi_image_out_ARLOCK;
output  [3:0] m_axi_image_out_ARCACHE;
output  [2:0] m_axi_image_out_ARPROT;
output  [3:0] m_axi_image_out_ARQOS;
output  [3:0] m_axi_image_out_ARREGION;
output  [0:0] m_axi_image_out_ARUSER;
input   m_axi_image_out_RVALID;
output   m_axi_image_out_RREADY;
input  [31:0] m_axi_image_out_RDATA;
input   m_axi_image_out_RLAST;
input  [0:0] m_axi_image_out_RID;
input  [8:0] m_axi_image_out_RFIFONUM;
input  [0:0] m_axi_image_out_RUSER;
input  [1:0] m_axi_image_out_RRESP;
input   m_axi_image_out_BVALID;
output   m_axi_image_out_BREADY;
input  [1:0] m_axi_image_out_BRESP;
input  [0:0] m_axi_image_out_BID;
input  [0:0] m_axi_image_out_BUSER;
input  [29:0] sext_ln27;
input  [29:0] sext_ln27_1;
input  [31:0] image_length;
input  [31:0] low_new_threshold;
input  [31:0] low_threshold;
input  [31:0] high_threshold;
input  [31:0] sub4;
input  [31:0] sub6;
input  [31:0] high_new_threshold;
input  [31:0] sub10;
input  [31:0] sub12;

reg ap_idle;
reg m_axi_image_in_RREADY;
reg m_axi_image_out_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln27_reg_318;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
wire    ap_block_state40_pp0_stage0_iter39;
wire    ap_block_state41_pp0_stage0_iter40;
wire    ap_block_state42_pp0_stage0_iter41;
wire    ap_block_state43_pp0_stage0_iter42;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln27_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    image_in_blk_n_R;
wire    ap_block_pp0_stage0;
reg    image_out_blk_n_W;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] reg_169;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln27_reg_318_pp0_iter3_reg;
reg   [0:0] icmp_ln31_reg_331;
reg   [0:0] icmp_ln31_reg_331_pp0_iter3_reg;
reg   [0:0] icmp_ln35_reg_335;
reg   [0:0] icmp_ln35_reg_335_pp0_iter3_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter1_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter2_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter4_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter5_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter6_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter7_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter8_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter9_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter10_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter11_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter12_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter13_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter14_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter15_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter16_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter17_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter18_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter19_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter20_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter21_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter22_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter23_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter24_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter25_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter26_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter27_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter28_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter29_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter30_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter31_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter32_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter33_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter34_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter35_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter36_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter37_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter38_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter39_reg;
reg   [0:0] icmp_ln27_reg_318_pp0_iter40_reg;
reg  signed [31:0] before_reg_322;
wire   [0:0] icmp_ln31_fu_212_p2;
reg   [0:0] icmp_ln31_reg_331_pp0_iter4_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter5_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter6_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter7_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter8_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter9_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter10_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter11_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter12_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter13_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter14_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter15_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter16_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter17_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter18_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter19_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter20_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter21_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter22_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter23_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter24_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter25_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter26_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter27_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter28_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter29_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter30_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter31_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter32_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter33_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter34_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter35_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter36_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter37_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter38_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter39_reg;
reg   [0:0] icmp_ln31_reg_331_pp0_iter40_reg;
wire   [0:0] icmp_ln35_fu_216_p2;
reg   [0:0] icmp_ln35_reg_335_pp0_iter4_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter5_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter6_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter7_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter8_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter9_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter10_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter11_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter12_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter13_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter14_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter15_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter16_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter17_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter18_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter19_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter20_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter21_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter22_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter23_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter24_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter25_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter26_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter27_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter28_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter29_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter30_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter31_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter32_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter33_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter34_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter35_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter36_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter37_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter38_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter39_reg;
reg   [0:0] icmp_ln35_reg_335_pp0_iter40_reg;
wire  signed [31:0] sub_ln41_fu_220_p2;
reg  signed [31:0] sub_ln41_reg_339;
wire  signed [31:0] sub_ln37_fu_224_p2;
reg  signed [31:0] sub_ln37_reg_344;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] mul_ln33_reg_349;
wire   [31:0] grp_fu_228_p2;
wire   [31:0] after_3_fu_242_p2;
reg   [31:0] after_3_reg_359;
wire   [31:0] after_2_fu_247_p2;
reg   [31:0] after_2_reg_364;
reg    ap_condition_exit_pp0_iter41_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter1_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter2_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter3_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter4_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter5_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter6_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter7_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter8_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter9_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter10_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter11_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter12_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter13_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter14_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter15_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter16_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter17_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter18_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter19_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter20_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter21_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter22_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter23_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter24_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter25_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter26_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter27_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter28_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter29_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter30_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter31_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter32_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter33_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter34_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter35_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter36_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter37_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter38_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter39_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter40_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter41_after_1_reg_149;
reg   [31:0] ap_phi_reg_pp0_iter42_after_1_reg_149;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] idx_fu_66;
wire   [31:0] add_ln27_fu_195_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_idx_1;
reg  signed [31:0] grp_fu_165_p0;
reg  signed [31:0] grp_fu_165_p1;
wire   [31:0] grp_fu_232_p2;
wire  signed [31:0] after_3_fu_242_p1;
wire   [31:0] grp_fu_237_p2;
reg    grp_fu_161_ce;
reg    grp_fu_165_ce;
reg    grp_fu_228_ce;
reg    grp_fu_232_ce;
reg    grp_fu_237_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg    ap_loop_exit_ready_pp0_iter39_reg;
reg    ap_loop_exit_ready_pp0_iter40_reg;
reg    ap_loop_exit_ready_pp0_iter41_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1022;
reg    ap_condition_1025;
reg    ap_condition_1896;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LinearContrastStretching_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(before_reg_322),
    .din1(low_new_threshold),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p2)
);

LinearContrastStretching_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_165_p0),
    .din1(grp_fu_165_p1),
    .ce(grp_fu_165_ce),
    .dout(grp_fu_165_p2)
);

LinearContrastStretching_udiv_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32ns_32ns_32_36_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln33_reg_349),
    .din1(low_threshold),
    .ce(grp_fu_228_ce),
    .dout(grp_fu_228_p2)
);

LinearContrastStretching_udiv_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32ns_32ns_32_36_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_169),
    .din1(sub12),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p2)
);

LinearContrastStretching_udiv_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32ns_32ns_32_36_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_169),
    .din1(sub6),
    .ce(grp_fu_237_ce),
    .dout(grp_fu_237_p2)
);

LinearContrastStretching_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter41_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter41_stage0)) begin
            ap_enable_reg_pp0_iter42 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter39 == 1'b1))) begin
        if (((icmp_ln31_reg_331_pp0_iter38_reg == 1'd1) & (icmp_ln27_reg_318_pp0_iter38_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter40_after_1_reg_149 <= grp_fu_228_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter40_after_1_reg_149 <= ap_phi_reg_pp0_iter39_after_1_reg_149;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter41 == 1'b1))) begin
        if ((1'b1 == ap_condition_1025)) begin
            ap_phi_reg_pp0_iter42_after_1_reg_149 <= after_3_reg_359;
        end else if ((1'b1 == ap_condition_1022)) begin
            ap_phi_reg_pp0_iter42_after_1_reg_149 <= after_2_reg_364;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter42_after_1_reg_149 <= ap_phi_reg_pp0_iter41_after_1_reg_149;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln27_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            idx_fu_66 <= add_ln27_fu_195_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            idx_fu_66 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_335_pp0_iter39_reg == 1'd1) & (icmp_ln31_reg_331_pp0_iter39_reg == 1'd0) & (icmp_ln27_reg_318_pp0_iter39_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        after_2_reg_364 <= after_2_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_335_pp0_iter39_reg == 1'd0) & (icmp_ln31_reg_331_pp0_iter39_reg == 1'd0) & (icmp_ln27_reg_318_pp0_iter39_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        after_3_reg_359 <= after_3_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
        ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln27_reg_318_pp0_iter10_reg <= icmp_ln27_reg_318_pp0_iter9_reg;
        icmp_ln27_reg_318_pp0_iter11_reg <= icmp_ln27_reg_318_pp0_iter10_reg;
        icmp_ln27_reg_318_pp0_iter12_reg <= icmp_ln27_reg_318_pp0_iter11_reg;
        icmp_ln27_reg_318_pp0_iter13_reg <= icmp_ln27_reg_318_pp0_iter12_reg;
        icmp_ln27_reg_318_pp0_iter14_reg <= icmp_ln27_reg_318_pp0_iter13_reg;
        icmp_ln27_reg_318_pp0_iter15_reg <= icmp_ln27_reg_318_pp0_iter14_reg;
        icmp_ln27_reg_318_pp0_iter16_reg <= icmp_ln27_reg_318_pp0_iter15_reg;
        icmp_ln27_reg_318_pp0_iter17_reg <= icmp_ln27_reg_318_pp0_iter16_reg;
        icmp_ln27_reg_318_pp0_iter18_reg <= icmp_ln27_reg_318_pp0_iter17_reg;
        icmp_ln27_reg_318_pp0_iter19_reg <= icmp_ln27_reg_318_pp0_iter18_reg;
        icmp_ln27_reg_318_pp0_iter20_reg <= icmp_ln27_reg_318_pp0_iter19_reg;
        icmp_ln27_reg_318_pp0_iter21_reg <= icmp_ln27_reg_318_pp0_iter20_reg;
        icmp_ln27_reg_318_pp0_iter22_reg <= icmp_ln27_reg_318_pp0_iter21_reg;
        icmp_ln27_reg_318_pp0_iter23_reg <= icmp_ln27_reg_318_pp0_iter22_reg;
        icmp_ln27_reg_318_pp0_iter24_reg <= icmp_ln27_reg_318_pp0_iter23_reg;
        icmp_ln27_reg_318_pp0_iter25_reg <= icmp_ln27_reg_318_pp0_iter24_reg;
        icmp_ln27_reg_318_pp0_iter26_reg <= icmp_ln27_reg_318_pp0_iter25_reg;
        icmp_ln27_reg_318_pp0_iter27_reg <= icmp_ln27_reg_318_pp0_iter26_reg;
        icmp_ln27_reg_318_pp0_iter28_reg <= icmp_ln27_reg_318_pp0_iter27_reg;
        icmp_ln27_reg_318_pp0_iter29_reg <= icmp_ln27_reg_318_pp0_iter28_reg;
        icmp_ln27_reg_318_pp0_iter2_reg <= icmp_ln27_reg_318_pp0_iter1_reg;
        icmp_ln27_reg_318_pp0_iter30_reg <= icmp_ln27_reg_318_pp0_iter29_reg;
        icmp_ln27_reg_318_pp0_iter31_reg <= icmp_ln27_reg_318_pp0_iter30_reg;
        icmp_ln27_reg_318_pp0_iter32_reg <= icmp_ln27_reg_318_pp0_iter31_reg;
        icmp_ln27_reg_318_pp0_iter33_reg <= icmp_ln27_reg_318_pp0_iter32_reg;
        icmp_ln27_reg_318_pp0_iter34_reg <= icmp_ln27_reg_318_pp0_iter33_reg;
        icmp_ln27_reg_318_pp0_iter35_reg <= icmp_ln27_reg_318_pp0_iter34_reg;
        icmp_ln27_reg_318_pp0_iter36_reg <= icmp_ln27_reg_318_pp0_iter35_reg;
        icmp_ln27_reg_318_pp0_iter37_reg <= icmp_ln27_reg_318_pp0_iter36_reg;
        icmp_ln27_reg_318_pp0_iter38_reg <= icmp_ln27_reg_318_pp0_iter37_reg;
        icmp_ln27_reg_318_pp0_iter39_reg <= icmp_ln27_reg_318_pp0_iter38_reg;
        icmp_ln27_reg_318_pp0_iter3_reg <= icmp_ln27_reg_318_pp0_iter2_reg;
        icmp_ln27_reg_318_pp0_iter40_reg <= icmp_ln27_reg_318_pp0_iter39_reg;
        icmp_ln27_reg_318_pp0_iter4_reg <= icmp_ln27_reg_318_pp0_iter3_reg;
        icmp_ln27_reg_318_pp0_iter5_reg <= icmp_ln27_reg_318_pp0_iter4_reg;
        icmp_ln27_reg_318_pp0_iter6_reg <= icmp_ln27_reg_318_pp0_iter5_reg;
        icmp_ln27_reg_318_pp0_iter7_reg <= icmp_ln27_reg_318_pp0_iter6_reg;
        icmp_ln27_reg_318_pp0_iter8_reg <= icmp_ln27_reg_318_pp0_iter7_reg;
        icmp_ln27_reg_318_pp0_iter9_reg <= icmp_ln27_reg_318_pp0_iter8_reg;
        icmp_ln31_reg_331_pp0_iter10_reg <= icmp_ln31_reg_331_pp0_iter9_reg;
        icmp_ln31_reg_331_pp0_iter11_reg <= icmp_ln31_reg_331_pp0_iter10_reg;
        icmp_ln31_reg_331_pp0_iter12_reg <= icmp_ln31_reg_331_pp0_iter11_reg;
        icmp_ln31_reg_331_pp0_iter13_reg <= icmp_ln31_reg_331_pp0_iter12_reg;
        icmp_ln31_reg_331_pp0_iter14_reg <= icmp_ln31_reg_331_pp0_iter13_reg;
        icmp_ln31_reg_331_pp0_iter15_reg <= icmp_ln31_reg_331_pp0_iter14_reg;
        icmp_ln31_reg_331_pp0_iter16_reg <= icmp_ln31_reg_331_pp0_iter15_reg;
        icmp_ln31_reg_331_pp0_iter17_reg <= icmp_ln31_reg_331_pp0_iter16_reg;
        icmp_ln31_reg_331_pp0_iter18_reg <= icmp_ln31_reg_331_pp0_iter17_reg;
        icmp_ln31_reg_331_pp0_iter19_reg <= icmp_ln31_reg_331_pp0_iter18_reg;
        icmp_ln31_reg_331_pp0_iter20_reg <= icmp_ln31_reg_331_pp0_iter19_reg;
        icmp_ln31_reg_331_pp0_iter21_reg <= icmp_ln31_reg_331_pp0_iter20_reg;
        icmp_ln31_reg_331_pp0_iter22_reg <= icmp_ln31_reg_331_pp0_iter21_reg;
        icmp_ln31_reg_331_pp0_iter23_reg <= icmp_ln31_reg_331_pp0_iter22_reg;
        icmp_ln31_reg_331_pp0_iter24_reg <= icmp_ln31_reg_331_pp0_iter23_reg;
        icmp_ln31_reg_331_pp0_iter25_reg <= icmp_ln31_reg_331_pp0_iter24_reg;
        icmp_ln31_reg_331_pp0_iter26_reg <= icmp_ln31_reg_331_pp0_iter25_reg;
        icmp_ln31_reg_331_pp0_iter27_reg <= icmp_ln31_reg_331_pp0_iter26_reg;
        icmp_ln31_reg_331_pp0_iter28_reg <= icmp_ln31_reg_331_pp0_iter27_reg;
        icmp_ln31_reg_331_pp0_iter29_reg <= icmp_ln31_reg_331_pp0_iter28_reg;
        icmp_ln31_reg_331_pp0_iter30_reg <= icmp_ln31_reg_331_pp0_iter29_reg;
        icmp_ln31_reg_331_pp0_iter31_reg <= icmp_ln31_reg_331_pp0_iter30_reg;
        icmp_ln31_reg_331_pp0_iter32_reg <= icmp_ln31_reg_331_pp0_iter31_reg;
        icmp_ln31_reg_331_pp0_iter33_reg <= icmp_ln31_reg_331_pp0_iter32_reg;
        icmp_ln31_reg_331_pp0_iter34_reg <= icmp_ln31_reg_331_pp0_iter33_reg;
        icmp_ln31_reg_331_pp0_iter35_reg <= icmp_ln31_reg_331_pp0_iter34_reg;
        icmp_ln31_reg_331_pp0_iter36_reg <= icmp_ln31_reg_331_pp0_iter35_reg;
        icmp_ln31_reg_331_pp0_iter37_reg <= icmp_ln31_reg_331_pp0_iter36_reg;
        icmp_ln31_reg_331_pp0_iter38_reg <= icmp_ln31_reg_331_pp0_iter37_reg;
        icmp_ln31_reg_331_pp0_iter39_reg <= icmp_ln31_reg_331_pp0_iter38_reg;
        icmp_ln31_reg_331_pp0_iter3_reg <= icmp_ln31_reg_331;
        icmp_ln31_reg_331_pp0_iter40_reg <= icmp_ln31_reg_331_pp0_iter39_reg;
        icmp_ln31_reg_331_pp0_iter4_reg <= icmp_ln31_reg_331_pp0_iter3_reg;
        icmp_ln31_reg_331_pp0_iter5_reg <= icmp_ln31_reg_331_pp0_iter4_reg;
        icmp_ln31_reg_331_pp0_iter6_reg <= icmp_ln31_reg_331_pp0_iter5_reg;
        icmp_ln31_reg_331_pp0_iter7_reg <= icmp_ln31_reg_331_pp0_iter6_reg;
        icmp_ln31_reg_331_pp0_iter8_reg <= icmp_ln31_reg_331_pp0_iter7_reg;
        icmp_ln31_reg_331_pp0_iter9_reg <= icmp_ln31_reg_331_pp0_iter8_reg;
        icmp_ln35_reg_335_pp0_iter10_reg <= icmp_ln35_reg_335_pp0_iter9_reg;
        icmp_ln35_reg_335_pp0_iter11_reg <= icmp_ln35_reg_335_pp0_iter10_reg;
        icmp_ln35_reg_335_pp0_iter12_reg <= icmp_ln35_reg_335_pp0_iter11_reg;
        icmp_ln35_reg_335_pp0_iter13_reg <= icmp_ln35_reg_335_pp0_iter12_reg;
        icmp_ln35_reg_335_pp0_iter14_reg <= icmp_ln35_reg_335_pp0_iter13_reg;
        icmp_ln35_reg_335_pp0_iter15_reg <= icmp_ln35_reg_335_pp0_iter14_reg;
        icmp_ln35_reg_335_pp0_iter16_reg <= icmp_ln35_reg_335_pp0_iter15_reg;
        icmp_ln35_reg_335_pp0_iter17_reg <= icmp_ln35_reg_335_pp0_iter16_reg;
        icmp_ln35_reg_335_pp0_iter18_reg <= icmp_ln35_reg_335_pp0_iter17_reg;
        icmp_ln35_reg_335_pp0_iter19_reg <= icmp_ln35_reg_335_pp0_iter18_reg;
        icmp_ln35_reg_335_pp0_iter20_reg <= icmp_ln35_reg_335_pp0_iter19_reg;
        icmp_ln35_reg_335_pp0_iter21_reg <= icmp_ln35_reg_335_pp0_iter20_reg;
        icmp_ln35_reg_335_pp0_iter22_reg <= icmp_ln35_reg_335_pp0_iter21_reg;
        icmp_ln35_reg_335_pp0_iter23_reg <= icmp_ln35_reg_335_pp0_iter22_reg;
        icmp_ln35_reg_335_pp0_iter24_reg <= icmp_ln35_reg_335_pp0_iter23_reg;
        icmp_ln35_reg_335_pp0_iter25_reg <= icmp_ln35_reg_335_pp0_iter24_reg;
        icmp_ln35_reg_335_pp0_iter26_reg <= icmp_ln35_reg_335_pp0_iter25_reg;
        icmp_ln35_reg_335_pp0_iter27_reg <= icmp_ln35_reg_335_pp0_iter26_reg;
        icmp_ln35_reg_335_pp0_iter28_reg <= icmp_ln35_reg_335_pp0_iter27_reg;
        icmp_ln35_reg_335_pp0_iter29_reg <= icmp_ln35_reg_335_pp0_iter28_reg;
        icmp_ln35_reg_335_pp0_iter30_reg <= icmp_ln35_reg_335_pp0_iter29_reg;
        icmp_ln35_reg_335_pp0_iter31_reg <= icmp_ln35_reg_335_pp0_iter30_reg;
        icmp_ln35_reg_335_pp0_iter32_reg <= icmp_ln35_reg_335_pp0_iter31_reg;
        icmp_ln35_reg_335_pp0_iter33_reg <= icmp_ln35_reg_335_pp0_iter32_reg;
        icmp_ln35_reg_335_pp0_iter34_reg <= icmp_ln35_reg_335_pp0_iter33_reg;
        icmp_ln35_reg_335_pp0_iter35_reg <= icmp_ln35_reg_335_pp0_iter34_reg;
        icmp_ln35_reg_335_pp0_iter36_reg <= icmp_ln35_reg_335_pp0_iter35_reg;
        icmp_ln35_reg_335_pp0_iter37_reg <= icmp_ln35_reg_335_pp0_iter36_reg;
        icmp_ln35_reg_335_pp0_iter38_reg <= icmp_ln35_reg_335_pp0_iter37_reg;
        icmp_ln35_reg_335_pp0_iter39_reg <= icmp_ln35_reg_335_pp0_iter38_reg;
        icmp_ln35_reg_335_pp0_iter3_reg <= icmp_ln35_reg_335;
        icmp_ln35_reg_335_pp0_iter40_reg <= icmp_ln35_reg_335_pp0_iter39_reg;
        icmp_ln35_reg_335_pp0_iter4_reg <= icmp_ln35_reg_335_pp0_iter3_reg;
        icmp_ln35_reg_335_pp0_iter5_reg <= icmp_ln35_reg_335_pp0_iter4_reg;
        icmp_ln35_reg_335_pp0_iter6_reg <= icmp_ln35_reg_335_pp0_iter5_reg;
        icmp_ln35_reg_335_pp0_iter7_reg <= icmp_ln35_reg_335_pp0_iter6_reg;
        icmp_ln35_reg_335_pp0_iter8_reg <= icmp_ln35_reg_335_pp0_iter7_reg;
        icmp_ln35_reg_335_pp0_iter9_reg <= icmp_ln35_reg_335_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln27_reg_318 <= icmp_ln27_fu_189_p2;
        icmp_ln27_reg_318_pp0_iter1_reg <= icmp_ln27_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter10_after_1_reg_149 <= ap_phi_reg_pp0_iter9_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter11_after_1_reg_149 <= ap_phi_reg_pp0_iter10_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter12_after_1_reg_149 <= ap_phi_reg_pp0_iter11_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter13_after_1_reg_149 <= ap_phi_reg_pp0_iter12_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter14_after_1_reg_149 <= ap_phi_reg_pp0_iter13_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter15_after_1_reg_149 <= ap_phi_reg_pp0_iter14_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter16_after_1_reg_149 <= ap_phi_reg_pp0_iter15_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter17_after_1_reg_149 <= ap_phi_reg_pp0_iter16_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter18_after_1_reg_149 <= ap_phi_reg_pp0_iter17_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter19_after_1_reg_149 <= ap_phi_reg_pp0_iter18_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_after_1_reg_149 <= ap_phi_reg_pp0_iter0_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter20_after_1_reg_149 <= ap_phi_reg_pp0_iter19_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter21_after_1_reg_149 <= ap_phi_reg_pp0_iter20_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter22_after_1_reg_149 <= ap_phi_reg_pp0_iter21_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter23_after_1_reg_149 <= ap_phi_reg_pp0_iter22_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter24_after_1_reg_149 <= ap_phi_reg_pp0_iter23_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter25_after_1_reg_149 <= ap_phi_reg_pp0_iter24_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter26_after_1_reg_149 <= ap_phi_reg_pp0_iter25_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter27_after_1_reg_149 <= ap_phi_reg_pp0_iter26_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        ap_phi_reg_pp0_iter28_after_1_reg_149 <= ap_phi_reg_pp0_iter27_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter28 == 1'b1))) begin
        ap_phi_reg_pp0_iter29_after_1_reg_149 <= ap_phi_reg_pp0_iter28_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_after_1_reg_149 <= ap_phi_reg_pp0_iter1_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        ap_phi_reg_pp0_iter30_after_1_reg_149 <= ap_phi_reg_pp0_iter29_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter30 == 1'b1))) begin
        ap_phi_reg_pp0_iter31_after_1_reg_149 <= ap_phi_reg_pp0_iter30_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        ap_phi_reg_pp0_iter32_after_1_reg_149 <= ap_phi_reg_pp0_iter31_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter32 == 1'b1))) begin
        ap_phi_reg_pp0_iter33_after_1_reg_149 <= ap_phi_reg_pp0_iter32_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter33 == 1'b1))) begin
        ap_phi_reg_pp0_iter34_after_1_reg_149 <= ap_phi_reg_pp0_iter33_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter34 == 1'b1))) begin
        ap_phi_reg_pp0_iter35_after_1_reg_149 <= ap_phi_reg_pp0_iter34_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter35 == 1'b1))) begin
        ap_phi_reg_pp0_iter36_after_1_reg_149 <= ap_phi_reg_pp0_iter35_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
        ap_phi_reg_pp0_iter37_after_1_reg_149 <= ap_phi_reg_pp0_iter36_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter37 == 1'b1))) begin
        ap_phi_reg_pp0_iter38_after_1_reg_149 <= ap_phi_reg_pp0_iter37_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter38 == 1'b1))) begin
        ap_phi_reg_pp0_iter39_after_1_reg_149 <= ap_phi_reg_pp0_iter38_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_after_1_reg_149 <= ap_phi_reg_pp0_iter2_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        ap_phi_reg_pp0_iter41_after_1_reg_149 <= ap_phi_reg_pp0_iter40_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_after_1_reg_149 <= ap_phi_reg_pp0_iter3_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_after_1_reg_149 <= ap_phi_reg_pp0_iter4_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_after_1_reg_149 <= ap_phi_reg_pp0_iter5_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_after_1_reg_149 <= ap_phi_reg_pp0_iter6_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_after_1_reg_149 <= ap_phi_reg_pp0_iter7_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_after_1_reg_149 <= ap_phi_reg_pp0_iter8_after_1_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln27_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        before_reg_322 <= m_axi_image_in_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln31_reg_331 <= icmp_ln31_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_212_p2 == 1'd0) & (icmp_ln27_reg_318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln35_reg_335 <= icmp_ln35_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_reg_318_pp0_iter2_reg == 1'd0) & (icmp_ln31_reg_331 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln33_reg_349 <= grp_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_335_pp0_iter3_reg == 1'd1) & (icmp_ln31_reg_331_pp0_iter3_reg == 1'd0) & (icmp_ln27_reg_318_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln35_reg_335_pp0_iter3_reg == 1'd0) & (icmp_ln31_reg_331_pp0_iter3_reg == 1'd0) & (icmp_ln27_reg_318_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_169 <= grp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_216_p2 == 1'd1) & (icmp_ln31_fu_212_p2 == 1'd0) & (icmp_ln27_reg_318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln37_reg_344 <= sub_ln37_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_216_p2 == 1'd0) & (icmp_ln31_fu_212_p2 == 1'd0) & (icmp_ln27_reg_318_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln41_reg_339 <= sub_ln41_fu_220_p2;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln27_reg_318_pp0_iter40_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter41 == 1'b1))) begin
        ap_condition_exit_pp0_iter41_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter41_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter41_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) 
    & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_idx_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_idx_1 = idx_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_165_ce = 1'b1;
    end else begin
        grp_fu_165_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1896)) begin
        if ((icmp_ln35_reg_335 == 1'd1)) begin
            grp_fu_165_p0 = sub_ln37_reg_344;
        end else if ((icmp_ln35_reg_335 == 1'd0)) begin
            grp_fu_165_p0 = sub_ln41_reg_339;
        end else begin
            grp_fu_165_p0 = 'bx;
        end
    end else begin
        grp_fu_165_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1896)) begin
        if ((icmp_ln35_reg_335 == 1'd1)) begin
            grp_fu_165_p1 = sub4;
        end else if ((icmp_ln35_reg_335 == 1'd0)) begin
            grp_fu_165_p1 = sub10;
        end else begin
            grp_fu_165_p1 = 'bx;
        end
    end else begin
        grp_fu_165_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_228_ce = 1'b1;
    end else begin
        grp_fu_228_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_237_ce = 1'b1;
    end else begin
        grp_fu_237_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln27_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        image_in_blk_n_R = m_axi_image_in_RVALID;
    end else begin
        image_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter42 == 1'b1))) begin
        image_out_blk_n_W = m_axi_image_out_WREADY;
    end else begin
        image_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln27_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_image_in_RREADY = 1'b1;
    end else begin
        m_axi_image_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter42 == 1'b1))) begin
        m_axi_image_out_WVALID = 1'b1;
    end else begin
        m_axi_image_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_195_p2 = (ap_sig_allocacmp_idx_1 + 32'd1);

assign after_2_fu_247_p2 = (grp_fu_237_p2 + high_new_threshold);

assign after_3_fu_242_p1 = low_new_threshold;

assign after_3_fu_242_p2 = ($signed(grp_fu_232_p2) + $signed(after_3_fu_242_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln27_reg_318 == 1'd0) & (m_axi_image_in_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_image_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln27_reg_318 == 1'd0) & (m_axi_image_in_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_image_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln27_reg_318 == 1'd0) & (m_axi_image_in_RVALID == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln27_reg_318 == 1'd0) & (m_axi_image_in_RVALID == 1'b0));
end

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1022 = ((icmp_ln35_reg_335_pp0_iter40_reg == 1'd1) & (icmp_ln31_reg_331_pp0_iter40_reg == 1'd0) & (icmp_ln27_reg_318_pp0_iter40_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1025 = ((icmp_ln35_reg_335_pp0_iter40_reg == 1'd0) & (icmp_ln31_reg_331_pp0_iter40_reg == 1'd0) & (icmp_ln27_reg_318_pp0_iter40_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1896 = ((icmp_ln27_reg_318_pp0_iter2_reg == 1'd0) & (icmp_ln31_reg_331 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_after_1_reg_149 = 'bx;

assign icmp_ln27_fu_189_p2 = ((ap_sig_allocacmp_idx_1 == image_length) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_212_p2 = ((before_reg_322 < low_threshold) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_216_p2 = ((before_reg_322 > high_threshold) ? 1'b1 : 1'b0);

assign m_axi_image_in_ARADDR = 32'd0;

assign m_axi_image_in_ARBURST = 2'd0;

assign m_axi_image_in_ARCACHE = 4'd0;

assign m_axi_image_in_ARID = 1'd0;

assign m_axi_image_in_ARLEN = 32'd0;

assign m_axi_image_in_ARLOCK = 2'd0;

assign m_axi_image_in_ARPROT = 3'd0;

assign m_axi_image_in_ARQOS = 4'd0;

assign m_axi_image_in_ARREGION = 4'd0;

assign m_axi_image_in_ARSIZE = 3'd0;

assign m_axi_image_in_ARUSER = 1'd0;

assign m_axi_image_in_ARVALID = 1'b0;

assign m_axi_image_in_AWADDR = 32'd0;

assign m_axi_image_in_AWBURST = 2'd0;

assign m_axi_image_in_AWCACHE = 4'd0;

assign m_axi_image_in_AWID = 1'd0;

assign m_axi_image_in_AWLEN = 32'd0;

assign m_axi_image_in_AWLOCK = 2'd0;

assign m_axi_image_in_AWPROT = 3'd0;

assign m_axi_image_in_AWQOS = 4'd0;

assign m_axi_image_in_AWREGION = 4'd0;

assign m_axi_image_in_AWSIZE = 3'd0;

assign m_axi_image_in_AWUSER = 1'd0;

assign m_axi_image_in_AWVALID = 1'b0;

assign m_axi_image_in_BREADY = 1'b0;

assign m_axi_image_in_WDATA = 32'd0;

assign m_axi_image_in_WID = 1'd0;

assign m_axi_image_in_WLAST = 1'b0;

assign m_axi_image_in_WSTRB = 4'd0;

assign m_axi_image_in_WUSER = 1'd0;

assign m_axi_image_in_WVALID = 1'b0;

assign m_axi_image_out_ARADDR = 32'd0;

assign m_axi_image_out_ARBURST = 2'd0;

assign m_axi_image_out_ARCACHE = 4'd0;

assign m_axi_image_out_ARID = 1'd0;

assign m_axi_image_out_ARLEN = 32'd0;

assign m_axi_image_out_ARLOCK = 2'd0;

assign m_axi_image_out_ARPROT = 3'd0;

assign m_axi_image_out_ARQOS = 4'd0;

assign m_axi_image_out_ARREGION = 4'd0;

assign m_axi_image_out_ARSIZE = 3'd0;

assign m_axi_image_out_ARUSER = 1'd0;

assign m_axi_image_out_ARVALID = 1'b0;

assign m_axi_image_out_AWADDR = 32'd0;

assign m_axi_image_out_AWBURST = 2'd0;

assign m_axi_image_out_AWCACHE = 4'd0;

assign m_axi_image_out_AWID = 1'd0;

assign m_axi_image_out_AWLEN = 32'd0;

assign m_axi_image_out_AWLOCK = 2'd0;

assign m_axi_image_out_AWPROT = 3'd0;

assign m_axi_image_out_AWQOS = 4'd0;

assign m_axi_image_out_AWREGION = 4'd0;

assign m_axi_image_out_AWSIZE = 3'd0;

assign m_axi_image_out_AWUSER = 1'd0;

assign m_axi_image_out_AWVALID = 1'b0;

assign m_axi_image_out_BREADY = 1'b0;

assign m_axi_image_out_RREADY = 1'b0;

assign m_axi_image_out_WDATA = ap_phi_reg_pp0_iter42_after_1_reg_149;

assign m_axi_image_out_WID = 1'd0;

assign m_axi_image_out_WLAST = 1'b0;

assign m_axi_image_out_WSTRB = 4'd15;

assign m_axi_image_out_WUSER = 1'd0;

assign sub_ln37_fu_224_p2 = ($signed(before_reg_322) - $signed(high_threshold));

assign sub_ln41_fu_220_p2 = ($signed(before_reg_322) - $signed(low_threshold));

endmodule //LinearContrastStretching_LinearContrastStretching_Pipeline_VITIS_LOOP_27_1
