-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LinearContrastStretching_LinearContrastStretching_Pipeline_VITIS_LOOP_24_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_image_in_AWVALID : OUT STD_LOGIC;
    m_axi_image_in_AWREADY : IN STD_LOGIC;
    m_axi_image_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WVALID : OUT STD_LOGIC;
    m_axi_image_in_WREADY : IN STD_LOGIC;
    m_axi_image_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_WLAST : OUT STD_LOGIC;
    m_axi_image_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARVALID : OUT STD_LOGIC;
    m_axi_image_in_ARREADY : IN STD_LOGIC;
    m_axi_image_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RVALID : IN STD_LOGIC;
    m_axi_image_in_RREADY : OUT STD_LOGIC;
    m_axi_image_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_in_RLAST : IN STD_LOGIC;
    m_axi_image_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_image_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BVALID : IN STD_LOGIC;
    m_axi_image_in_BREADY : OUT STD_LOGIC;
    m_axi_image_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_AWVALID : OUT STD_LOGIC;
    m_axi_image_out_AWREADY : IN STD_LOGIC;
    m_axi_image_out_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_WVALID : OUT STD_LOGIC;
    m_axi_image_out_WREADY : IN STD_LOGIC;
    m_axi_image_out_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_WLAST : OUT STD_LOGIC;
    m_axi_image_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_ARVALID : OUT STD_LOGIC;
    m_axi_image_out_ARREADY : IN STD_LOGIC;
    m_axi_image_out_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_image_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_image_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_RVALID : IN STD_LOGIC;
    m_axi_image_out_RREADY : OUT STD_LOGIC;
    m_axi_image_out_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_image_out_RLAST : IN STD_LOGIC;
    m_axi_image_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_image_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_BVALID : IN STD_LOGIC;
    m_axi_image_out_BREADY : OUT STD_LOGIC;
    m_axi_image_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_image_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_image_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln24 : IN STD_LOGIC_VECTOR (29 downto 0);
    image_length : IN STD_LOGIC_VECTOR (31 downto 0);
    low_new_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    low_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    image_out_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    high_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    sub12 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub14 : IN STD_LOGIC_VECTOR (31 downto 0);
    high_new_threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    sub22 : IN STD_LOGIC_VECTOR (31 downto 0);
    sub24 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of LinearContrastStretching_LinearContrastStretching_Pipeline_VITIS_LOOP_24_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln24_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal icmp_ln26_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state42_io : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal icmp_ln26_reg_397_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state43_io : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal icmp_ln26_reg_397_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state48_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln24_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal image_in_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal image_out_blk_n_AW : STD_LOGIC;
    signal image_out_blk_n_W : STD_LOGIC;
    signal image_out_blk_n_B : STD_LOGIC;
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_379_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_379_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter38_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter39_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_383_pp0_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_addr_read_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_397_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_401_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln36_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln36_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln32_reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln28_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln28_reg_420_pp0_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln28_reg_420_pp0_iter41_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter19_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter20_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter21_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter22_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter23_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter24_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter25_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter26_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter27_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter28_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter29_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter30_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter31_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter32_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter33_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter34_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter35_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter36_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter37_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter38_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter39_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter40_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter41_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter42_storereflowmerge_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln28_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal idx_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_193_ce : STD_LOGIC;
    signal grp_fu_197_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_281_ce : STD_LOGIC;
    signal grp_fu_286_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_1110 : BOOLEAN;
    signal ap_condition_1114 : BOOLEAN;
    signal ap_condition_1912 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component LinearContrastStretching_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearContrastStretching_udiv_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LinearContrastStretching_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U1 : component LinearContrastStretching_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => image_in_addr_read_reg_388,
        din1 => low_new_threshold,
        ce => grp_fu_193_ce,
        dout => grp_fu_193_p2);

    mul_32s_32s_32_2_1_U2 : component LinearContrastStretching_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_197_p0,
        din1 => grp_fu_197_p1,
        ce => grp_fu_197_ce,
        dout => grp_fu_197_p2);

    udiv_32ns_32ns_32_36_1_U3 : component LinearContrastStretching_udiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln28_reg_415,
        din1 => low_threshold,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    udiv_32ns_32ns_32_36_1_U4 : component LinearContrastStretching_udiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_210,
        din1 => sub24,
        ce => grp_fu_281_ce,
        dout => grp_fu_281_p2);

    udiv_32ns_32ns_32_36_1_U5 : component LinearContrastStretching_udiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_210,
        din1 => sub14,
        ce => grp_fu_286_ce,
        dout => grp_fu_286_p2);

    flow_control_loop_pipe_sequential_init_U : component LinearContrastStretching_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter46_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter42_storereflowmerge_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_1114)) then 
                    ap_phi_reg_pp0_iter42_storereflowmerge_reg_183 <= add_ln36_reg_425;
                elsif ((ap_const_boolean_1 = ap_condition_1110)) then 
                    ap_phi_reg_pp0_iter42_storereflowmerge_reg_183 <= add_ln32_reg_430;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter42_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter41_storereflowmerge_reg_183;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln24_fu_226_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    idx_fu_76 <= add_ln24_fu_232_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    idx_fu_76 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_226_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_reg_383 <= add_ln26_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln26_reg_383_pp0_iter10_reg <= add_ln26_reg_383_pp0_iter9_reg;
                add_ln26_reg_383_pp0_iter11_reg <= add_ln26_reg_383_pp0_iter10_reg;
                add_ln26_reg_383_pp0_iter12_reg <= add_ln26_reg_383_pp0_iter11_reg;
                add_ln26_reg_383_pp0_iter13_reg <= add_ln26_reg_383_pp0_iter12_reg;
                add_ln26_reg_383_pp0_iter14_reg <= add_ln26_reg_383_pp0_iter13_reg;
                add_ln26_reg_383_pp0_iter15_reg <= add_ln26_reg_383_pp0_iter14_reg;
                add_ln26_reg_383_pp0_iter16_reg <= add_ln26_reg_383_pp0_iter15_reg;
                add_ln26_reg_383_pp0_iter17_reg <= add_ln26_reg_383_pp0_iter16_reg;
                add_ln26_reg_383_pp0_iter18_reg <= add_ln26_reg_383_pp0_iter17_reg;
                add_ln26_reg_383_pp0_iter19_reg <= add_ln26_reg_383_pp0_iter18_reg;
                add_ln26_reg_383_pp0_iter20_reg <= add_ln26_reg_383_pp0_iter19_reg;
                add_ln26_reg_383_pp0_iter21_reg <= add_ln26_reg_383_pp0_iter20_reg;
                add_ln26_reg_383_pp0_iter22_reg <= add_ln26_reg_383_pp0_iter21_reg;
                add_ln26_reg_383_pp0_iter23_reg <= add_ln26_reg_383_pp0_iter22_reg;
                add_ln26_reg_383_pp0_iter24_reg <= add_ln26_reg_383_pp0_iter23_reg;
                add_ln26_reg_383_pp0_iter25_reg <= add_ln26_reg_383_pp0_iter24_reg;
                add_ln26_reg_383_pp0_iter26_reg <= add_ln26_reg_383_pp0_iter25_reg;
                add_ln26_reg_383_pp0_iter27_reg <= add_ln26_reg_383_pp0_iter26_reg;
                add_ln26_reg_383_pp0_iter28_reg <= add_ln26_reg_383_pp0_iter27_reg;
                add_ln26_reg_383_pp0_iter29_reg <= add_ln26_reg_383_pp0_iter28_reg;
                add_ln26_reg_383_pp0_iter2_reg <= add_ln26_reg_383_pp0_iter1_reg;
                add_ln26_reg_383_pp0_iter30_reg <= add_ln26_reg_383_pp0_iter29_reg;
                add_ln26_reg_383_pp0_iter31_reg <= add_ln26_reg_383_pp0_iter30_reg;
                add_ln26_reg_383_pp0_iter32_reg <= add_ln26_reg_383_pp0_iter31_reg;
                add_ln26_reg_383_pp0_iter33_reg <= add_ln26_reg_383_pp0_iter32_reg;
                add_ln26_reg_383_pp0_iter34_reg <= add_ln26_reg_383_pp0_iter33_reg;
                add_ln26_reg_383_pp0_iter35_reg <= add_ln26_reg_383_pp0_iter34_reg;
                add_ln26_reg_383_pp0_iter36_reg <= add_ln26_reg_383_pp0_iter35_reg;
                add_ln26_reg_383_pp0_iter37_reg <= add_ln26_reg_383_pp0_iter36_reg;
                add_ln26_reg_383_pp0_iter38_reg <= add_ln26_reg_383_pp0_iter37_reg;
                add_ln26_reg_383_pp0_iter39_reg <= add_ln26_reg_383_pp0_iter38_reg;
                add_ln26_reg_383_pp0_iter3_reg <= add_ln26_reg_383_pp0_iter2_reg;
                add_ln26_reg_383_pp0_iter40_reg <= add_ln26_reg_383_pp0_iter39_reg;
                add_ln26_reg_383_pp0_iter4_reg <= add_ln26_reg_383_pp0_iter3_reg;
                add_ln26_reg_383_pp0_iter5_reg <= add_ln26_reg_383_pp0_iter4_reg;
                add_ln26_reg_383_pp0_iter6_reg <= add_ln26_reg_383_pp0_iter5_reg;
                add_ln26_reg_383_pp0_iter7_reg <= add_ln26_reg_383_pp0_iter6_reg;
                add_ln26_reg_383_pp0_iter8_reg <= add_ln26_reg_383_pp0_iter7_reg;
                add_ln26_reg_383_pp0_iter9_reg <= add_ln26_reg_383_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln24_reg_379_pp0_iter10_reg <= icmp_ln24_reg_379_pp0_iter9_reg;
                icmp_ln24_reg_379_pp0_iter11_reg <= icmp_ln24_reg_379_pp0_iter10_reg;
                icmp_ln24_reg_379_pp0_iter12_reg <= icmp_ln24_reg_379_pp0_iter11_reg;
                icmp_ln24_reg_379_pp0_iter13_reg <= icmp_ln24_reg_379_pp0_iter12_reg;
                icmp_ln24_reg_379_pp0_iter14_reg <= icmp_ln24_reg_379_pp0_iter13_reg;
                icmp_ln24_reg_379_pp0_iter15_reg <= icmp_ln24_reg_379_pp0_iter14_reg;
                icmp_ln24_reg_379_pp0_iter16_reg <= icmp_ln24_reg_379_pp0_iter15_reg;
                icmp_ln24_reg_379_pp0_iter17_reg <= icmp_ln24_reg_379_pp0_iter16_reg;
                icmp_ln24_reg_379_pp0_iter18_reg <= icmp_ln24_reg_379_pp0_iter17_reg;
                icmp_ln24_reg_379_pp0_iter19_reg <= icmp_ln24_reg_379_pp0_iter18_reg;
                icmp_ln24_reg_379_pp0_iter20_reg <= icmp_ln24_reg_379_pp0_iter19_reg;
                icmp_ln24_reg_379_pp0_iter21_reg <= icmp_ln24_reg_379_pp0_iter20_reg;
                icmp_ln24_reg_379_pp0_iter22_reg <= icmp_ln24_reg_379_pp0_iter21_reg;
                icmp_ln24_reg_379_pp0_iter23_reg <= icmp_ln24_reg_379_pp0_iter22_reg;
                icmp_ln24_reg_379_pp0_iter24_reg <= icmp_ln24_reg_379_pp0_iter23_reg;
                icmp_ln24_reg_379_pp0_iter25_reg <= icmp_ln24_reg_379_pp0_iter24_reg;
                icmp_ln24_reg_379_pp0_iter26_reg <= icmp_ln24_reg_379_pp0_iter25_reg;
                icmp_ln24_reg_379_pp0_iter27_reg <= icmp_ln24_reg_379_pp0_iter26_reg;
                icmp_ln24_reg_379_pp0_iter28_reg <= icmp_ln24_reg_379_pp0_iter27_reg;
                icmp_ln24_reg_379_pp0_iter29_reg <= icmp_ln24_reg_379_pp0_iter28_reg;
                icmp_ln24_reg_379_pp0_iter2_reg <= icmp_ln24_reg_379_pp0_iter1_reg;
                icmp_ln24_reg_379_pp0_iter30_reg <= icmp_ln24_reg_379_pp0_iter29_reg;
                icmp_ln24_reg_379_pp0_iter31_reg <= icmp_ln24_reg_379_pp0_iter30_reg;
                icmp_ln24_reg_379_pp0_iter32_reg <= icmp_ln24_reg_379_pp0_iter31_reg;
                icmp_ln24_reg_379_pp0_iter33_reg <= icmp_ln24_reg_379_pp0_iter32_reg;
                icmp_ln24_reg_379_pp0_iter34_reg <= icmp_ln24_reg_379_pp0_iter33_reg;
                icmp_ln24_reg_379_pp0_iter35_reg <= icmp_ln24_reg_379_pp0_iter34_reg;
                icmp_ln24_reg_379_pp0_iter36_reg <= icmp_ln24_reg_379_pp0_iter35_reg;
                icmp_ln24_reg_379_pp0_iter37_reg <= icmp_ln24_reg_379_pp0_iter36_reg;
                icmp_ln24_reg_379_pp0_iter38_reg <= icmp_ln24_reg_379_pp0_iter37_reg;
                icmp_ln24_reg_379_pp0_iter39_reg <= icmp_ln24_reg_379_pp0_iter38_reg;
                icmp_ln24_reg_379_pp0_iter3_reg <= icmp_ln24_reg_379_pp0_iter2_reg;
                icmp_ln24_reg_379_pp0_iter40_reg <= icmp_ln24_reg_379_pp0_iter39_reg;
                icmp_ln24_reg_379_pp0_iter4_reg <= icmp_ln24_reg_379_pp0_iter3_reg;
                icmp_ln24_reg_379_pp0_iter5_reg <= icmp_ln24_reg_379_pp0_iter4_reg;
                icmp_ln24_reg_379_pp0_iter6_reg <= icmp_ln24_reg_379_pp0_iter5_reg;
                icmp_ln24_reg_379_pp0_iter7_reg <= icmp_ln24_reg_379_pp0_iter6_reg;
                icmp_ln24_reg_379_pp0_iter8_reg <= icmp_ln24_reg_379_pp0_iter7_reg;
                icmp_ln24_reg_379_pp0_iter9_reg <= icmp_ln24_reg_379_pp0_iter8_reg;
                icmp_ln26_reg_397_pp0_iter10_reg <= icmp_ln26_reg_397_pp0_iter9_reg;
                icmp_ln26_reg_397_pp0_iter11_reg <= icmp_ln26_reg_397_pp0_iter10_reg;
                icmp_ln26_reg_397_pp0_iter12_reg <= icmp_ln26_reg_397_pp0_iter11_reg;
                icmp_ln26_reg_397_pp0_iter13_reg <= icmp_ln26_reg_397_pp0_iter12_reg;
                icmp_ln26_reg_397_pp0_iter14_reg <= icmp_ln26_reg_397_pp0_iter13_reg;
                icmp_ln26_reg_397_pp0_iter15_reg <= icmp_ln26_reg_397_pp0_iter14_reg;
                icmp_ln26_reg_397_pp0_iter16_reg <= icmp_ln26_reg_397_pp0_iter15_reg;
                icmp_ln26_reg_397_pp0_iter17_reg <= icmp_ln26_reg_397_pp0_iter16_reg;
                icmp_ln26_reg_397_pp0_iter18_reg <= icmp_ln26_reg_397_pp0_iter17_reg;
                icmp_ln26_reg_397_pp0_iter19_reg <= icmp_ln26_reg_397_pp0_iter18_reg;
                icmp_ln26_reg_397_pp0_iter20_reg <= icmp_ln26_reg_397_pp0_iter19_reg;
                icmp_ln26_reg_397_pp0_iter21_reg <= icmp_ln26_reg_397_pp0_iter20_reg;
                icmp_ln26_reg_397_pp0_iter22_reg <= icmp_ln26_reg_397_pp0_iter21_reg;
                icmp_ln26_reg_397_pp0_iter23_reg <= icmp_ln26_reg_397_pp0_iter22_reg;
                icmp_ln26_reg_397_pp0_iter24_reg <= icmp_ln26_reg_397_pp0_iter23_reg;
                icmp_ln26_reg_397_pp0_iter25_reg <= icmp_ln26_reg_397_pp0_iter24_reg;
                icmp_ln26_reg_397_pp0_iter26_reg <= icmp_ln26_reg_397_pp0_iter25_reg;
                icmp_ln26_reg_397_pp0_iter27_reg <= icmp_ln26_reg_397_pp0_iter26_reg;
                icmp_ln26_reg_397_pp0_iter28_reg <= icmp_ln26_reg_397_pp0_iter27_reg;
                icmp_ln26_reg_397_pp0_iter29_reg <= icmp_ln26_reg_397_pp0_iter28_reg;
                icmp_ln26_reg_397_pp0_iter30_reg <= icmp_ln26_reg_397_pp0_iter29_reg;
                icmp_ln26_reg_397_pp0_iter31_reg <= icmp_ln26_reg_397_pp0_iter30_reg;
                icmp_ln26_reg_397_pp0_iter32_reg <= icmp_ln26_reg_397_pp0_iter31_reg;
                icmp_ln26_reg_397_pp0_iter33_reg <= icmp_ln26_reg_397_pp0_iter32_reg;
                icmp_ln26_reg_397_pp0_iter34_reg <= icmp_ln26_reg_397_pp0_iter33_reg;
                icmp_ln26_reg_397_pp0_iter35_reg <= icmp_ln26_reg_397_pp0_iter34_reg;
                icmp_ln26_reg_397_pp0_iter36_reg <= icmp_ln26_reg_397_pp0_iter35_reg;
                icmp_ln26_reg_397_pp0_iter37_reg <= icmp_ln26_reg_397_pp0_iter36_reg;
                icmp_ln26_reg_397_pp0_iter38_reg <= icmp_ln26_reg_397_pp0_iter37_reg;
                icmp_ln26_reg_397_pp0_iter39_reg <= icmp_ln26_reg_397_pp0_iter38_reg;
                icmp_ln26_reg_397_pp0_iter3_reg <= icmp_ln26_reg_397;
                icmp_ln26_reg_397_pp0_iter40_reg <= icmp_ln26_reg_397_pp0_iter39_reg;
                icmp_ln26_reg_397_pp0_iter41_reg <= icmp_ln26_reg_397_pp0_iter40_reg;
                icmp_ln26_reg_397_pp0_iter42_reg <= icmp_ln26_reg_397_pp0_iter41_reg;
                icmp_ln26_reg_397_pp0_iter43_reg <= icmp_ln26_reg_397_pp0_iter42_reg;
                icmp_ln26_reg_397_pp0_iter44_reg <= icmp_ln26_reg_397_pp0_iter43_reg;
                icmp_ln26_reg_397_pp0_iter45_reg <= icmp_ln26_reg_397_pp0_iter44_reg;
                icmp_ln26_reg_397_pp0_iter46_reg <= icmp_ln26_reg_397_pp0_iter45_reg;
                icmp_ln26_reg_397_pp0_iter4_reg <= icmp_ln26_reg_397_pp0_iter3_reg;
                icmp_ln26_reg_397_pp0_iter5_reg <= icmp_ln26_reg_397_pp0_iter4_reg;
                icmp_ln26_reg_397_pp0_iter6_reg <= icmp_ln26_reg_397_pp0_iter5_reg;
                icmp_ln26_reg_397_pp0_iter7_reg <= icmp_ln26_reg_397_pp0_iter6_reg;
                icmp_ln26_reg_397_pp0_iter8_reg <= icmp_ln26_reg_397_pp0_iter7_reg;
                icmp_ln26_reg_397_pp0_iter9_reg <= icmp_ln26_reg_397_pp0_iter8_reg;
                icmp_ln30_reg_401_pp0_iter10_reg <= icmp_ln30_reg_401_pp0_iter9_reg;
                icmp_ln30_reg_401_pp0_iter11_reg <= icmp_ln30_reg_401_pp0_iter10_reg;
                icmp_ln30_reg_401_pp0_iter12_reg <= icmp_ln30_reg_401_pp0_iter11_reg;
                icmp_ln30_reg_401_pp0_iter13_reg <= icmp_ln30_reg_401_pp0_iter12_reg;
                icmp_ln30_reg_401_pp0_iter14_reg <= icmp_ln30_reg_401_pp0_iter13_reg;
                icmp_ln30_reg_401_pp0_iter15_reg <= icmp_ln30_reg_401_pp0_iter14_reg;
                icmp_ln30_reg_401_pp0_iter16_reg <= icmp_ln30_reg_401_pp0_iter15_reg;
                icmp_ln30_reg_401_pp0_iter17_reg <= icmp_ln30_reg_401_pp0_iter16_reg;
                icmp_ln30_reg_401_pp0_iter18_reg <= icmp_ln30_reg_401_pp0_iter17_reg;
                icmp_ln30_reg_401_pp0_iter19_reg <= icmp_ln30_reg_401_pp0_iter18_reg;
                icmp_ln30_reg_401_pp0_iter20_reg <= icmp_ln30_reg_401_pp0_iter19_reg;
                icmp_ln30_reg_401_pp0_iter21_reg <= icmp_ln30_reg_401_pp0_iter20_reg;
                icmp_ln30_reg_401_pp0_iter22_reg <= icmp_ln30_reg_401_pp0_iter21_reg;
                icmp_ln30_reg_401_pp0_iter23_reg <= icmp_ln30_reg_401_pp0_iter22_reg;
                icmp_ln30_reg_401_pp0_iter24_reg <= icmp_ln30_reg_401_pp0_iter23_reg;
                icmp_ln30_reg_401_pp0_iter25_reg <= icmp_ln30_reg_401_pp0_iter24_reg;
                icmp_ln30_reg_401_pp0_iter26_reg <= icmp_ln30_reg_401_pp0_iter25_reg;
                icmp_ln30_reg_401_pp0_iter27_reg <= icmp_ln30_reg_401_pp0_iter26_reg;
                icmp_ln30_reg_401_pp0_iter28_reg <= icmp_ln30_reg_401_pp0_iter27_reg;
                icmp_ln30_reg_401_pp0_iter29_reg <= icmp_ln30_reg_401_pp0_iter28_reg;
                icmp_ln30_reg_401_pp0_iter30_reg <= icmp_ln30_reg_401_pp0_iter29_reg;
                icmp_ln30_reg_401_pp0_iter31_reg <= icmp_ln30_reg_401_pp0_iter30_reg;
                icmp_ln30_reg_401_pp0_iter32_reg <= icmp_ln30_reg_401_pp0_iter31_reg;
                icmp_ln30_reg_401_pp0_iter33_reg <= icmp_ln30_reg_401_pp0_iter32_reg;
                icmp_ln30_reg_401_pp0_iter34_reg <= icmp_ln30_reg_401_pp0_iter33_reg;
                icmp_ln30_reg_401_pp0_iter35_reg <= icmp_ln30_reg_401_pp0_iter34_reg;
                icmp_ln30_reg_401_pp0_iter36_reg <= icmp_ln30_reg_401_pp0_iter35_reg;
                icmp_ln30_reg_401_pp0_iter37_reg <= icmp_ln30_reg_401_pp0_iter36_reg;
                icmp_ln30_reg_401_pp0_iter38_reg <= icmp_ln30_reg_401_pp0_iter37_reg;
                icmp_ln30_reg_401_pp0_iter39_reg <= icmp_ln30_reg_401_pp0_iter38_reg;
                icmp_ln30_reg_401_pp0_iter3_reg <= icmp_ln30_reg_401;
                icmp_ln30_reg_401_pp0_iter40_reg <= icmp_ln30_reg_401_pp0_iter39_reg;
                icmp_ln30_reg_401_pp0_iter4_reg <= icmp_ln30_reg_401_pp0_iter3_reg;
                icmp_ln30_reg_401_pp0_iter5_reg <= icmp_ln30_reg_401_pp0_iter4_reg;
                icmp_ln30_reg_401_pp0_iter6_reg <= icmp_ln30_reg_401_pp0_iter5_reg;
                icmp_ln30_reg_401_pp0_iter7_reg <= icmp_ln30_reg_401_pp0_iter6_reg;
                icmp_ln30_reg_401_pp0_iter8_reg <= icmp_ln30_reg_401_pp0_iter7_reg;
                icmp_ln30_reg_401_pp0_iter9_reg <= icmp_ln30_reg_401_pp0_iter8_reg;
                udiv_ln28_reg_420_pp0_iter40_reg <= udiv_ln28_reg_420;
                udiv_ln28_reg_420_pp0_iter41_reg <= udiv_ln28_reg_420_pp0_iter40_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln26_reg_383_pp0_iter1_reg <= add_ln26_reg_383;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln24_reg_379 <= icmp_ln24_fu_226_p2;
                icmp_ln24_reg_379_pp0_iter1_reg <= icmp_ln24_reg_379;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_401_pp0_iter39_reg = ap_const_lv1_1) and (icmp_ln26_reg_397_pp0_iter39_reg = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter39_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_reg_430 <= add_ln32_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_401_pp0_iter39_reg = ap_const_lv1_0) and (icmp_ln26_reg_397_pp0_iter39_reg = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter39_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln36_reg_425 <= add_ln36_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter9_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter10_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter11_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter12_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter13_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter14_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter15_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter16_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter17_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter18_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter0_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter19_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter20_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter21_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter22_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter23_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter24_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter25_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter26_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter28_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter27_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter29_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter28_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter1_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter30_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter29_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter31_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter30_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter32_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter31_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter33_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter32_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter34_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter33_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter35_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter34_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter36_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter35_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter37_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter36_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter38_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter37_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter39_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter38_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter2_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter40_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter39_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter41_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter40_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter3_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter5_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter4_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter6_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter5_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter6_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter7_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_storereflowmerge_reg_183 <= ap_phi_reg_pp0_iter8_storereflowmerge_reg_183;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_379_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln26_reg_397 <= icmp_ln26_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_261_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln30_reg_401 <= icmp_ln30_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln24_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                image_in_addr_read_reg_388 <= m_axi_image_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397 = ap_const_lv1_1))) then
                mul_ln28_reg_415 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln30_reg_401_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln26_reg_397_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((icmp_ln30_reg_401_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln26_reg_397_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then
                reg_210 <= grp_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_265_p2 = ap_const_lv1_1) and (icmp_ln26_fu_261_p2 = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln32_reg_410 <= sub_ln32_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_265_p2 = ap_const_lv1_0) and (icmp_ln26_fu_261_p2 = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln36_reg_405 <= sub_ln36_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_397_pp0_iter38_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                udiv_ln28_reg_420 <= grp_fu_277_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln24_fu_232_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx_1) + unsigned(ap_const_lv32_1));
    add_ln26_fu_244_p2 <= std_logic_vector(unsigned(shl_ln26_fu_238_p2) + unsigned(image_out_offset));
    add_ln32_fu_296_p2 <= std_logic_vector(unsigned(grp_fu_286_p2) + unsigned(high_new_threshold));
    add_ln36_fu_291_p1 <= low_new_threshold;
    add_ln36_fu_291_p2 <= std_logic_vector(unsigned(grp_fu_281_p2) + unsigned(add_ln36_fu_291_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter47, m_axi_image_in_RVALID, icmp_ln24_reg_379, m_axi_image_out_BVALID, icmp_ln26_reg_397_pp0_iter46_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_379 = ap_const_lv1_0) and (m_axi_image_in_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter47, m_axi_image_in_RVALID, icmp_ln24_reg_379, m_axi_image_out_BVALID, ap_block_state42_io, ap_block_state43_io, icmp_ln26_reg_397_pp0_iter46_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_const_boolean_1 = ap_block_state43_io) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state42_io) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_379 = ap_const_lv1_0) and (m_axi_image_in_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter47, m_axi_image_in_RVALID, icmp_ln24_reg_379, m_axi_image_out_BVALID, ap_block_state42_io, ap_block_state43_io, icmp_ln26_reg_397_pp0_iter46_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)))) or ((ap_const_boolean_1 = ap_block_state43_io) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state42_io) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_379 = ap_const_lv1_0) and (m_axi_image_in_RVALID = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_image_in_RVALID, icmp_ln24_reg_379)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln24_reg_379 = ap_const_lv1_0) and (m_axi_image_in_RVALID = ap_const_logic_0));
    end process;

        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state42_io_assign_proc : process(m_axi_image_out_AWREADY, icmp_ln26_reg_397_pp0_iter40_reg)
    begin
                ap_block_state42_io <= (((icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_1) and (m_axi_image_out_AWREADY = ap_const_logic_0)) or ((icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_0) and (m_axi_image_out_AWREADY = ap_const_logic_0)));
    end process;

        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_io_assign_proc : process(m_axi_image_out_WREADY, icmp_ln26_reg_397_pp0_iter41_reg)
    begin
                ap_block_state43_io <= (((icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_1) and (m_axi_image_out_WREADY = ap_const_logic_0)) or ((icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_0) and (m_axi_image_out_WREADY = ap_const_logic_0)));
    end process;

        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state48_pp0_stage0_iter47_assign_proc : process(m_axi_image_out_BVALID, icmp_ln26_reg_397_pp0_iter46_reg)
    begin
                ap_block_state48_pp0_stage0_iter47 <= (((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_1) and (m_axi_image_out_BVALID = ap_const_logic_0)) or ((icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_0) and (m_axi_image_out_BVALID = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1110_assign_proc : process(icmp_ln26_reg_397_pp0_iter40_reg, icmp_ln24_reg_379_pp0_iter40_reg, icmp_ln30_reg_401_pp0_iter40_reg)
    begin
                ap_condition_1110 <= ((icmp_ln30_reg_401_pp0_iter40_reg = ap_const_lv1_1) and (icmp_ln24_reg_379_pp0_iter40_reg = ap_const_lv1_0) and (icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_0));
    end process;


    ap_condition_1114_assign_proc : process(icmp_ln26_reg_397_pp0_iter40_reg, icmp_ln24_reg_379_pp0_iter40_reg, icmp_ln30_reg_401_pp0_iter40_reg)
    begin
                ap_condition_1114 <= ((icmp_ln30_reg_401_pp0_iter40_reg = ap_const_lv1_0) and (icmp_ln24_reg_379_pp0_iter40_reg = ap_const_lv1_0) and (icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_0));
    end process;


    ap_condition_1912_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln26_reg_397, ap_block_pp0_stage0, icmp_ln24_reg_379_pp0_iter2_reg)
    begin
                ap_condition_1912 <= ((icmp_ln24_reg_379_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln24_fu_226_p2)
    begin
        if (((icmp_ln24_fu_226_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_379, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_379 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter46_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter46_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_storereflowmerge_reg_183 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, idx_fu_76, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_idx_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_idx_1 <= idx_fu_76;
        end if; 
    end process;


    grp_fu_193_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_193_ce <= ap_const_logic_1;
        else 
            grp_fu_193_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_197_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_197_ce <= ap_const_logic_1;
        else 
            grp_fu_197_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_197_p0_assign_proc : process(icmp_ln30_reg_401, sub_ln36_reg_405, sub_ln32_reg_410, ap_condition_1912)
    begin
        if ((ap_const_boolean_1 = ap_condition_1912)) then
            if ((icmp_ln30_reg_401 = ap_const_lv1_1)) then 
                grp_fu_197_p0 <= sub_ln32_reg_410;
            elsif ((icmp_ln30_reg_401 = ap_const_lv1_0)) then 
                grp_fu_197_p0 <= sub_ln36_reg_405;
            else 
                grp_fu_197_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_197_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_197_p1_assign_proc : process(sub12, sub22, icmp_ln30_reg_401, ap_condition_1912)
    begin
        if ((ap_const_boolean_1 = ap_condition_1912)) then
            if ((icmp_ln30_reg_401 = ap_const_lv1_1)) then 
                grp_fu_197_p1 <= sub12;
            elsif ((icmp_ln30_reg_401 = ap_const_lv1_0)) then 
                grp_fu_197_p1 <= sub22;
            else 
                grp_fu_197_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_197_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_201_p4 <= add_ln26_reg_383_pp0_iter40_reg(31 downto 2);

    grp_fu_277_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_277_ce <= ap_const_logic_1;
        else 
            grp_fu_277_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_281_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_281_ce <= ap_const_logic_1;
        else 
            grp_fu_281_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_286_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_286_ce <= ap_const_logic_1;
        else 
            grp_fu_286_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln24_fu_226_p2 <= "1" when (ap_sig_allocacmp_idx_1 = image_length) else "0";
    icmp_ln26_fu_261_p2 <= "1" when (unsigned(image_in_addr_read_reg_388) < unsigned(low_threshold)) else "0";
    icmp_ln30_fu_265_p2 <= "1" when (unsigned(image_in_addr_read_reg_388) > unsigned(high_threshold)) else "0";

    image_in_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_image_in_RVALID, icmp_ln24_reg_379, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            image_in_blk_n_R <= m_axi_image_in_RVALID;
        else 
            image_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter41, m_axi_image_out_AWREADY, icmp_ln26_reg_397_pp0_iter40_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)))) then 
            image_out_blk_n_AW <= m_axi_image_out_AWREADY;
        else 
            image_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter47, m_axi_image_out_BVALID, icmp_ln26_reg_397_pp0_iter46_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1)))) then 
            image_out_blk_n_B <= m_axi_image_out_BVALID;
        else 
            image_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    image_out_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter42, m_axi_image_out_WREADY, icmp_ln26_reg_397_pp0_iter41_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1)))) then 
            image_out_blk_n_W <= m_axi_image_out_WREADY;
        else 
            image_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_image_in_ARADDR <= ap_const_lv32_0;
    m_axi_image_in_ARBURST <= ap_const_lv2_0;
    m_axi_image_in_ARCACHE <= ap_const_lv4_0;
    m_axi_image_in_ARID <= ap_const_lv1_0;
    m_axi_image_in_ARLEN <= ap_const_lv32_0;
    m_axi_image_in_ARLOCK <= ap_const_lv2_0;
    m_axi_image_in_ARPROT <= ap_const_lv3_0;
    m_axi_image_in_ARQOS <= ap_const_lv4_0;
    m_axi_image_in_ARREGION <= ap_const_lv4_0;
    m_axi_image_in_ARSIZE <= ap_const_lv3_0;
    m_axi_image_in_ARUSER <= ap_const_lv1_0;
    m_axi_image_in_ARVALID <= ap_const_logic_0;
    m_axi_image_in_AWADDR <= ap_const_lv32_0;
    m_axi_image_in_AWBURST <= ap_const_lv2_0;
    m_axi_image_in_AWCACHE <= ap_const_lv4_0;
    m_axi_image_in_AWID <= ap_const_lv1_0;
    m_axi_image_in_AWLEN <= ap_const_lv32_0;
    m_axi_image_in_AWLOCK <= ap_const_lv2_0;
    m_axi_image_in_AWPROT <= ap_const_lv3_0;
    m_axi_image_in_AWQOS <= ap_const_lv4_0;
    m_axi_image_in_AWREGION <= ap_const_lv4_0;
    m_axi_image_in_AWSIZE <= ap_const_lv3_0;
    m_axi_image_in_AWUSER <= ap_const_lv1_0;
    m_axi_image_in_AWVALID <= ap_const_logic_0;
    m_axi_image_in_BREADY <= ap_const_logic_0;

    m_axi_image_in_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_379, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_image_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_image_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_in_WDATA <= ap_const_lv32_0;
    m_axi_image_in_WID <= ap_const_lv1_0;
    m_axi_image_in_WLAST <= ap_const_logic_0;
    m_axi_image_in_WSTRB <= ap_const_lv4_0;
    m_axi_image_in_WUSER <= ap_const_lv1_0;
    m_axi_image_in_WVALID <= ap_const_logic_0;
    m_axi_image_out_ARADDR <= ap_const_lv32_0;
    m_axi_image_out_ARBURST <= ap_const_lv2_0;
    m_axi_image_out_ARCACHE <= ap_const_lv4_0;
    m_axi_image_out_ARID <= ap_const_lv1_0;
    m_axi_image_out_ARLEN <= ap_const_lv32_0;
    m_axi_image_out_ARLOCK <= ap_const_lv2_0;
    m_axi_image_out_ARPROT <= ap_const_lv3_0;
    m_axi_image_out_ARQOS <= ap_const_lv4_0;
    m_axi_image_out_ARREGION <= ap_const_lv4_0;
    m_axi_image_out_ARSIZE <= ap_const_lv3_0;
    m_axi_image_out_ARUSER <= ap_const_lv1_0;
    m_axi_image_out_ARVALID <= ap_const_logic_0;

    m_axi_image_out_AWADDR_assign_proc : process(ap_enable_reg_pp0_iter41, icmp_ln26_reg_397_pp0_iter40_reg, ap_block_pp0_stage0_11001, p_cast_cast_fu_301_p1, sext_ln28_fu_312_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then
            if ((icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_1)) then 
                m_axi_image_out_AWADDR <= sext_ln28_fu_312_p1;
            elsif ((icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_0)) then 
                m_axi_image_out_AWADDR <= p_cast_cast_fu_301_p1;
            else 
                m_axi_image_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_image_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_image_out_AWBURST <= ap_const_lv2_0;
    m_axi_image_out_AWCACHE <= ap_const_lv4_0;
    m_axi_image_out_AWID <= ap_const_lv1_0;
    m_axi_image_out_AWLEN <= ap_const_lv32_1;
    m_axi_image_out_AWLOCK <= ap_const_lv2_0;
    m_axi_image_out_AWPROT <= ap_const_lv3_0;
    m_axi_image_out_AWQOS <= ap_const_lv4_0;
    m_axi_image_out_AWREGION <= ap_const_lv4_0;
    m_axi_image_out_AWSIZE <= ap_const_lv3_0;
    m_axi_image_out_AWUSER <= ap_const_lv1_0;

    m_axi_image_out_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter41, icmp_ln26_reg_397_pp0_iter40_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397_pp0_iter40_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1)))) then 
            m_axi_image_out_AWVALID <= ap_const_logic_1;
        else 
            m_axi_image_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_image_out_BREADY_assign_proc : process(ap_enable_reg_pp0_iter47, icmp_ln26_reg_397_pp0_iter46_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397_pp0_iter46_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1)))) then 
            m_axi_image_out_BREADY <= ap_const_logic_1;
        else 
            m_axi_image_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_image_out_RREADY <= ap_const_logic_0;

    m_axi_image_out_WDATA_assign_proc : process(ap_enable_reg_pp0_iter42, icmp_ln26_reg_397_pp0_iter41_reg, udiv_ln28_reg_420_pp0_iter41_reg, ap_phi_reg_pp0_iter42_storereflowmerge_reg_183, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then
            if ((icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_1)) then 
                m_axi_image_out_WDATA <= udiv_ln28_reg_420_pp0_iter41_reg;
            elsif ((icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_0)) then 
                m_axi_image_out_WDATA <= ap_phi_reg_pp0_iter42_storereflowmerge_reg_183;
            else 
                m_axi_image_out_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_image_out_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_image_out_WID <= ap_const_lv1_0;
    m_axi_image_out_WLAST <= ap_const_logic_0;
    m_axi_image_out_WSTRB <= ap_const_lv4_F;
    m_axi_image_out_WUSER <= ap_const_lv1_0;

    m_axi_image_out_WVALID_assign_proc : process(ap_enable_reg_pp0_iter42, icmp_ln26_reg_397_pp0_iter41_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_397_pp0_iter41_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1)))) then 
            m_axi_image_out_WVALID <= ap_const_logic_1;
        else 
            m_axi_image_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        p_cast_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_201_p4),32));

        sext_ln28_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_201_p4),32));

    shl_ln26_fu_238_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_idx_1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    sub_ln32_fu_273_p2 <= std_logic_vector(signed(image_in_addr_read_reg_388) - signed(high_threshold));
    sub_ln36_fu_269_p2 <= std_logic_vector(signed(image_in_addr_read_reg_388) - signed(low_threshold));
end behav;
